// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Adyen
@_exported import Adyen
import Adyen3DS2
import AdyenNetworking
import CloudKit
import CommonCrypto
import Contacts
import CoreGraphics
import Darwin/*.fputs*/
import Foundation
import LocalAuthentication
import PassKit
import QuartzCore
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
open class AbstractPersonalInformationComponent : Adyen.PaymentComponent, Adyen.PresentableComponent, Adyen.PaymentAware {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public let paymentMethod: any Adyen.PaymentMethod
  weak public var delegate: (any Adyen.PaymentComponentDelegate)?
  public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public let requiresModalPresentation: Swift.Bool
  @_spi(AdyenInternal) public var configuration: Adyen.AbstractPersonalInformationComponent.Configuration
  @_spi(AdyenInternal) public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, fields: [Adyen.PersonalInformation], configuration: Adyen.AbstractPersonalInformationComponent.Configuration)
  @_spi(AdyenInternal) public var firstNameItem: Adyen.FormTextInputItem? {
    get
  }
  @_spi(AdyenInternal) public var lastNameItem: Adyen.FormTextInputItem? {
    get
  }
  @_spi(AdyenInternal) public var emailItem: Adyen.FormTextInputItem? {
    get
  }
  @_spi(AdyenInternal) public var addressItem: Adyen.FormAddressPickerItem? {
    get
  }
  @_spi(AdyenInternal) public var deliveryAddressItem: Adyen.FormAddressPickerItem? {
    get
  }
  @_spi(AdyenInternal) public var phoneItem: Adyen.FormPhoneNumberItem? {
    get
  }
  @_spi(AdyenInternal) open func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) open func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @_spi(AdyenInternal) open func phoneExtensions() -> [Adyen.PhoneExtension]
  @_spi(AdyenInternal) open func addressViewModelBuilder() -> any Adyen.AddressViewModelBuilder
  @_spi(AdyenInternal) public func showValidation()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AbstractPersonalInformationComponent : Adyen.ViewControllerPresenter {
  @_spi(AdyenInternal) public func presentViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_spi(AdyenInternal) public func dismissViewController(animated: Swift.Bool)
}
@_spi(AdyenInternal) extension Adyen.AbstractPersonalInformationComponent : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) public func viewWillAppear(viewController: UIKit.UIViewController)
  @_spi(AdyenInternal) public func viewDidLoad(viewController: UIKit.UIViewController)
}
extension Adyen.AbstractPersonalInformationComponent : Adyen.LoadingComponent {
  public func stopLoading()
}
@_spi(AdyenInternal) extension Adyen.AbstractPersonalInformationComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) public enum PersonalInformation : Swift.Equatable {
  @_spi(AdyenInternal) case firstName
  @_spi(AdyenInternal) case lastName
  @_spi(AdyenInternal) case email
  @_spi(AdyenInternal) case phone
  @_spi(AdyenInternal) case address
  @_spi(AdyenInternal) case deliveryAddress
  @_spi(AdyenInternal) case custom(any Adyen.FormItemInjector)
  @_spi(AdyenInternal) public static func == (lhs: Adyen.PersonalInformation, rhs: Adyen.PersonalInformation) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ACHDirectDebitComponent : Adyen.PaymentComponent, Adyen.PaymentAware, Adyen.PresentableComponent, Adyen.LoadingComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)? {
    get
    set
  }
  final public var configuration: Adyen.ACHDirectDebitComponent.Configuration
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public let requiresModalPresentation: Swift.Bool
  @_spi(AdyenInternal) final public let publicKeyProvider: any Adyen.AnyPublicKeyProvider
  convenience public init(paymentMethod: Adyen.ACHDirectDebitPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.ACHDirectDebitComponent.Configuration = .init())
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.ACHDirectDebitComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.ACHDirectDebitComponent : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) final public func viewDidLoad(viewController: UIKit.UIViewController)
}
public protocol AnyACHDirectDebitConfiguration {
  var showsStorePaymentMethodField: Swift.Bool { get }
  var showsBillingAddress: Swift.Bool { get }
  var billingAddressCountryCodes: [Swift.String] { get }
}
extension Adyen.ACHDirectDebitComponent {
  public struct Configuration : Adyen.AnyACHDirectDebitConfiguration, Adyen.AnyPersonalInformationConfiguration {
    public var style: Adyen.FormComponentStyle
    public var shopperInformation: Adyen.PrefilledShopperInformation?
    public var localizationParameters: Adyen.LocalizationParameters?
    public var showsStorePaymentMethodField: Swift.Bool
    public var showsBillingAddress: Swift.Bool
    public var billingAddressCountryCodes: [Swift.String]
    public init(style: Adyen.FormComponentStyle = FormComponentStyle(), shopperInformation: Adyen.PrefilledShopperInformation? = nil, localizationParameters: Adyen.LocalizationParameters? = nil, showsStorePaymentMethodField: Swift.Bool = true, showsBillingAddress: Swift.Bool = true, billingAddressCountryCodes: [Swift.String] = ["US", "PR"])
  }
}
@_spi(AdyenInternal) extension Adyen.ACHDirectDebitComponent : Adyen.ViewControllerPresenter {
  @_spi(AdyenInternal) final public func presentViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_spi(AdyenInternal) final public func dismissViewController(animated: Swift.Bool)
}
@_spi(AdyenInternal) extension Adyen.ACHDirectDebitComponent : Adyen.PublicKeyConsumer {
}
public struct ACHDirectDebitDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let holderName: Swift.String
  public let encryptedBankAccountNumber: Swift.String
  public let encryptedBankRoutingNumber: Swift.String?
  public let billingAddress: Adyen.PostalAddress?
  public init(paymentMethod: Adyen.ACHDirectDebitPaymentMethod, holderName: Swift.String, encryptedBankAccountNumber: Swift.String, encryptedBankRoutingNumber: Swift.String?, billingAddress: Adyen.PostalAddress?)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ACHDirectDebitPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoredACHDirectDebitPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public let bankAccountNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Action : Swift.Decodable {
  case redirect(Adyen.RedirectAction)
  case sdk(Adyen.SDKAction)
  case threeDS2Fingerprint(Adyen.ThreeDS2FingerprintAction)
  case threeDS2Challenge(Adyen.ThreeDS2ChallengeAction)
  case threeDS2(Adyen.ThreeDS2Action)
  case await(Adyen.AwaitAction)
  case redirectableAwait(Adyen.RedirectableAwaitAction)
  case voucher(Adyen.VoucherAction)
  case qrCode(Adyen.QRCodeAction)
  case document(Adyen.DocumentAction)
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ActionComponent : Adyen.Component {
  var delegate: (any Adyen.ActionComponentDelegate)? { get set }
}
public protocol ActionComponentDelegate : AnyObject {
  func didOpenExternalApplication(component: any Adyen.ActionComponent)
  func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
  func didComplete(from component: any Adyen.ActionComponent)
  func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
}
extension Adyen.ActionComponentDelegate {
  public func didOpenExternalApplication(component: any Adyen.ActionComponent)
}
public struct ActionComponentData {
  public let details: any Adyen.AdditionalDetails
  public let paymentData: Swift.String?
  public init(details: any Adyen.AdditionalDetails, paymentData: Swift.String?)
}
public struct ActionComponentStyle {
  public var redirectComponentStyle: Adyen.RedirectComponentStyle
  public var awaitComponentStyle: Adyen.AwaitComponentStyle
  public var voucherComponentStyle: Adyen.VoucherComponentStyle
  public var qrCodeComponentStyle: Adyen.QRCodeComponentStyle
  public var documentActionComponentStyle: Adyen.DocumentComponentStyle
  public init(redirectComponentStyle: Adyen.RedirectComponentStyle = RedirectComponentStyle(), awaitComponentStyle: Adyen.AwaitComponentStyle = AwaitComponentStyle(), voucherComponentStyle: Adyen.VoucherComponentStyle = VoucherComponentStyle(), qrCodeComponentStyle: Adyen.QRCodeComponentStyle = QRCodeComponentStyle(), documentActionComponentStyle: Adyen.DocumentComponentStyle = DocumentComponentStyle())
}
public protocol ActionHandlingComponent : Adyen.Component {
  func handle(_ action: Adyen.Action)
}
@_spi(AdyenInternal) public enum AddressAnalyticsValidationError : Adyen.AnalyticsValidationError {
  @_spi(AdyenInternal) case postalCodeEmpty
  @_spi(AdyenInternal) case postalCodePartial
  @_spi(AdyenInternal) public var analyticsErrorCode: Swift.Int {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var analyticsErrorMessage: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public static func == (a: Adyen.AddressAnalyticsValidationError, b: Adyen.AddressAnalyticsValidationError) -> Swift.Bool
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) public class AddressInputFormViewController : Adyen.FormViewController {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(viewModel: Adyen.AddressInputFormViewController.ViewModel)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AddressInputFormViewController {
  @_spi(AdyenInternal) public typealias ShowSearchHandler = (_ currentInput: Adyen.PostalAddress) -> Swift.Void
  @_spi(AdyenInternal) public struct ViewModel {
    @_spi(AdyenInternal) public init(for addressType: Adyen.FormAddressPickerItem.AddressType, style: Adyen.FormComponentStyle, localizationParameters: Adyen.LocalizationParameters?, initialCountry: Swift.String, prefillAddress: Adyen.PostalAddress?, supportedCountryCodes: [Swift.String]?, addressViewModelBuilder: any Adyen.AddressViewModelBuilder = DefaultAddressViewModelBuilder(), handleShowSearch: Adyen.AddressInputFormViewController.ShowSearchHandler? = nil, completionHandler: @escaping (Adyen.PostalAddress?) -> Swift.Void)
  }
}
public struct LookupAddressModel {
  public let identifier: Swift.String
  public let postalAddress: Adyen.PostalAddress
  public init(identifier: Swift.String, postalAddress: Adyen.PostalAddress)
}
public protocol AddressLookupProvider : AnyObject {
  func lookUp(searchTerm: Swift.String, resultHandler: @escaping (_ result: [Adyen.LookupAddressModel]) -> Swift.Void)
  func complete(incompleteAddress: Adyen.LookupAddressModel, resultHandler: @escaping (_ result: Swift.Result<Adyen.PostalAddress, any Swift.Error>) -> Swift.Void)
}
extension Adyen.AddressLookupProvider {
  public func complete(incompleteAddress: Adyen.LookupAddressModel, resultHandler: @escaping (_ result: Swift.Result<Adyen.PostalAddress, any Swift.Error>) -> Swift.Void)
}
public struct AddressLookupSearchStyle : Adyen.ViewStyle {
  public var backgroundColor: UIKit.UIColor
  public var manualEntryListItem: Adyen.ListItemStyle
  public var emptyView: Adyen.EmptyStateViewStyle
  public init()
}
public struct AddressLookupStyle : Adyen.ViewStyle {
  public var backgroundColor: UIKit.UIColor
  public var search: Adyen.AddressLookupSearchStyle
  public var form: Adyen.FormComponentStyle
  public init(search: Adyen.AddressLookupSearchStyle = .init(), form: Adyen.FormComponentStyle = .init())
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) public class AddressLookupViewController : UIKit.UINavigationController, Adyen.AdyenObserver {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(viewModel: Adyen.AddressLookupViewController.ViewModel)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AddressLookupViewController {
  @_spi(AdyenInternal) public struct ViewModel {
    @_spi(AdyenInternal) public init(for addressType: Adyen.FormAddressPickerItem.AddressType, style: Adyen.AddressLookupStyle = .init(), localizationParameters: Adyen.LocalizationParameters?, supportedCountryCodes: [Swift.String]?, initialCountry: Swift.String, prefillAddress: Adyen.PostalAddress? = nil, lookupProvider: any Adyen.AddressLookupProvider, completionHandler: @escaping (Adyen.PostalAddress?) -> Swift.Void)
  }
}
public struct AddressStyle : Adyen.FormValueItemStyle {
  public var title: Adyen.TextStyle
  public var textField: Adyen.FormTextItemStyle
  public var tintColor: UIKit.UIColor? {
    get
    set
  }
  public var backgroundColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor? {
    get
  }
  public init(title: Adyen.TextStyle, textField: Adyen.FormTextItemStyle, tintColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor = .clear)
  public init()
}
@_spi(AdyenInternal) public enum AddressField : Swift.String, Swift.CaseIterable {
  @_spi(AdyenInternal) case street
  @_spi(AdyenInternal) case houseNumberOrName
  @_spi(AdyenInternal) case apartment
  @_spi(AdyenInternal) case postalCode
  @_spi(AdyenInternal) case city
  @_spi(AdyenInternal) case stateOrProvince
  @_spi(AdyenInternal) case country
  @_spi(AdyenInternal) public init?(rawValue: Swift.String)
  @_spi(AdyenInternal) public typealias AllCases = [Adyen.AddressField]
  @_spi(AdyenInternal) public typealias RawValue = Swift.String
  @_spi(AdyenInternal) public static var allCases: [Adyen.AddressField] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var rawValue: Swift.String {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public enum AddressFormScheme {
  @_spi(AdyenInternal) public var children: [Adyen.AddressField] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) case item(Adyen.AddressField)
  @_spi(AdyenInternal) case split(Adyen.AddressField, Adyen.AddressField)
}
@_spi(AdyenInternal) public struct AddressViewModel {
  @_spi(AdyenInternal) public var optionalFields: [Adyen.AddressField]
  @_spi(AdyenInternal) public var scheme: [Adyen.AddressFormScheme]
  @_spi(AdyenInternal) public init(labels: [Adyen.AddressField : Adyen.LocalizationKey], placeholder: [Adyen.AddressField : Adyen.LocalizationKey], optionalFields: [Adyen.AddressField], scheme: [Adyen.AddressFormScheme])
}
@_spi(AdyenInternal) extension Adyen.AddressViewModel {
  @_spi(AdyenInternal) public var requiredFields: Swift.Set<Adyen.AddressField> {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.PostalAddress {
  @_spi(AdyenInternal) public func satisfies(requiredFields: Swift.Set<Adyen.AddressField>) -> Swift.Bool
}
final public class AdyenActionComponent : Adyen.ActionComponent, Adyen.ActionHandlingComponent {
  final public let context: Adyen.AdyenContext
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  final public var configuration: Adyen.AdyenActionComponent.Configuration
  public struct Configuration : Adyen.Localizable {
    public var localizationParameters: Adyen.LocalizationParameters?
    public var style: Adyen.ActionComponentStyle
    public var threeDS: Adyen.AdyenActionComponent.Configuration.ThreeDS
    public struct ThreeDS {
      public var requestorAppURL: Foundation.URL?
      public var delegateAuthentication: Adyen.ThreeDS2Component.Configuration.DelegatedAuthentication?
      public var appearanceConfiguration: Adyen3DS2.ADYAppearanceConfiguration
      public init(requestorAppURL: Foundation.URL? = nil, delegateAuthentication: Adyen.ThreeDS2Component.Configuration.DelegatedAuthentication? = nil, appearanceConfiguration: Adyen3DS2.ADYAppearanceConfiguration = .init())
    }
    public var twint: Adyen.AdyenActionComponent.Configuration.Twint?
    public struct Twint {
      public var callbackAppScheme: Swift.String
      public init(callbackAppScheme: Swift.String)
    }
    public init(localizationParameters: Adyen.LocalizationParameters? = nil, style: Adyen.ActionComponentStyle = .init(), threeDS: Adyen.AdyenActionComponent.Configuration.ThreeDS = .init(), twint: Adyen.AdyenActionComponent.Configuration.Twint? = nil)
  }
  public init(context: Adyen.AdyenContext, configuration: Adyen.AdyenActionComponent.Configuration = Configuration())
  final public func handle(_ action: Adyen.Action)
  @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class AnalyticsForSession {
  @_spi(AdyenInternal) public static var sessionId: Swift.String?
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol AnalyticsEvent : Swift.Encodable {
  @_spi(AdyenInternal) var timestamp: Swift.Int { get }
  @_spi(AdyenInternal) var component: Swift.String { get }
  @_spi(AdyenInternal) var id: Swift.String { get }
}
@_spi(AdyenInternal) public enum AnalyticsEventTarget : Swift.String, Swift.Encodable {
  @_spi(AdyenInternal) case cardNumber
  @_spi(AdyenInternal) case expiryDate
  @_spi(AdyenInternal) case securityCode
  @_spi(AdyenInternal) case holderName
  @_spi(AdyenInternal) case dualBrand
  @_spi(AdyenInternal) case boletoSocialSecurityNumber
  @_spi(AdyenInternal) case taxNumber
  @_spi(AdyenInternal) case authPassWord
  @_spi(AdyenInternal) case addressStreet
  @_spi(AdyenInternal) case addressHouseNumber
  @_spi(AdyenInternal) case addressCity
  @_spi(AdyenInternal) case addressPostalCode
  @_spi(AdyenInternal) case issuerList
  @_spi(AdyenInternal) case listSearch
  @_spi(AdyenInternal) public init?(rawValue: Swift.String)
  @_spi(AdyenInternal) public typealias RawValue = Swift.String
  @_spi(AdyenInternal) public var rawValue: Swift.String {
    @_spi(AdyenInternal) get
  }
}
public struct AnalyticsConfiguration {
  public var isEnabled: Swift.Bool
  @_spi(AdyenInternal) public var context: Adyen.AnalyticsContext
  public init()
}
@_spi(AdyenInternal) public struct AdditionalAnalyticsFields {
  @_spi(AdyenInternal) public let amount: Adyen.Amount?
  @_spi(AdyenInternal) public let sessionId: Swift.String?
  @_spi(AdyenInternal) public init(amount: Adyen.Amount?, sessionId: Swift.String?)
}
@_spi(AdyenInternal) public protocol AdyenCancellable {
  @_spi(AdyenInternal) func cancel()
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers public class AdyenTask : Adyen.AdyenCancellable {
  @_spi(AdyenInternal) public var isCancelled: Swift.Bool {
    get
  }
  @_spi(AdyenInternal) public func cancel()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public enum AdyenCoder {
  @_spi(AdyenInternal) public static func decode<T>(_ data: Foundation.Data) throws -> T where T : Swift.Decodable
  @_spi(AdyenInternal) public static func decode<T>(_ string: Swift.String) throws -> T where T : Swift.Decodable
  @_spi(AdyenInternal) public static func decodeBase64<T>(_ string: Swift.String) throws -> T where T : Swift.Decodable
  @_spi(AdyenInternal) public static func encode(_ value: some Encodable) throws -> Foundation.Data
  @_spi(AdyenInternal) public static func encode(_ value: some Encodable) throws -> Swift.String
  @_spi(AdyenInternal) public static func encodeBase64(_ value: some Encodable) throws -> Swift.String
}
@_hasMissingDesignatedInitializers final public class AdyenContext : Adyen.PaymentAware {
  final public let apiContext: Adyen.APIContext
  final public var payment: Adyen.Payment? {
    get
  }
  @_spi(AdyenInternal) final public let analyticsProvider: (any Adyen.AnalyticsProviderProtocol)?
  convenience public init(apiContext: Adyen.APIContext, payment: Adyen.Payment?, analyticsConfiguration: Adyen.AnalyticsConfiguration = .init())
  @_spi(AdyenInternal) final public func update(payment: Adyen.Payment?)
  @objc deinit
}
@_spi(AdyenInternal) public struct AdyenDependencyValues {
  @_spi(AdyenInternal) public subscript<K>(key: K.Type) -> K.Value where K : Adyen.AdyenDependencyKey {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
}
@_spi(AdyenInternal) @propertyWrapper public struct AdyenDependency<T> {
  @_spi(AdyenInternal) public var wrappedValue: T {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(_ keyPath: Swift.KeyPath<Adyen.AdyenDependencyValues, T>)
}
@_spi(AdyenInternal) public protocol AdyenDependencyKey {
  associatedtype Value
  @_spi(AdyenInternal) static var liveValue: Self.Value { get }
}
@propertyWrapper final public class AdyenObservable<ValueType> : Adyen.EventPublisher where ValueType : Swift.Equatable {
  public init(_ value: ValueType)
  final public var wrappedValue: ValueType {
    get
    set
  }
  public typealias Event = ValueType
  final public var eventHandlers: [Adyen.EventHandlerToken : Adyen.EventHandler<Adyen.AdyenObservable<ValueType>.Event>]
  final public var projectedValue: Adyen.AdyenObservable<ValueType> {
    get
  }
  @objc deinit
}
public protocol AdyenObserver : AnyObject {
}
@_spi(AdyenInternal) extension Adyen.AdyenObserver {
  @_spi(AdyenInternal) @discardableResult
  public func observe<T>(_ eventPublisher: T, eventHandler: @escaping Adyen.EventHandler<T.Event>) -> Adyen.Observation where T : Adyen.EventPublisher
  @_spi(AdyenInternal) @discardableResult
  public func bind<Value, Target>(_ observable: Adyen.AdyenObservable<Value>, to target: Target, at keyPath: Swift.ReferenceWritableKeyPath<Target, Value>) -> Adyen.Observation where Value : Swift.Equatable, Target : AnyObject
  @_spi(AdyenInternal) @discardableResult
  public func bind<Value, Target>(_ observable: Adyen.AdyenObservable<Value>, to target: Target, at keyPath: Swift.ReferenceWritableKeyPath<Target, Value?>) -> Adyen.Observation where Value : Swift.Equatable, Target : AnyObject
  @_spi(AdyenInternal) @discardableResult
  public func bind<Value, Result, Target>(_ observable: Adyen.AdyenObservable<Value>, to target: Target, at keyPath: Swift.ReferenceWritableKeyPath<Target, Result>, with transformation: @escaping ((Value) -> Result)) -> Adyen.Observation where Value : Swift.Equatable, Target : AnyObject
  @_spi(AdyenInternal) @discardableResult
  public func bind<Value, Result, Target>(_ observable: Adyen.AdyenObservable<Value>, at originKeyPath: Swift.KeyPath<Value, Result>, to target: Target, at keyPath: Swift.ReferenceWritableKeyPath<Target, Result>) -> Adyen.Observation where Value : Swift.Equatable, Target : AnyObject
  @_spi(AdyenInternal) @discardableResult
  public func bind<Value, Result, Target>(_ observable: Adyen.AdyenObservable<Value>, at originKeyPath: Swift.KeyPath<Value, Result>, to target: Target, at keyPath: Swift.ReferenceWritableKeyPath<Target, Result?>) -> Adyen.Observation where Value : Swift.Equatable, Target : AnyObject
  @_spi(AdyenInternal) public func remove(_ observation: Adyen.Observation)
}
@_spi(AdyenInternal) public struct AdyenScope<Base> {
  @_spi(AdyenInternal) public let base: Base
  @_spi(AdyenInternal) public init(base: Base)
}
@_spi(AdyenInternal) public protocol AdyenCompatible {
  associatedtype AdyenBase
  @_spi(AdyenInternal) var adyen: Adyen.AdyenScope<Self.AdyenBase> { get }
}
@_spi(AdyenInternal) extension Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public var adyen: Adyen.AdyenScope<Self> {
    @_spi(AdyenInternal) get
  }
}
public let adyenSdkVersion: Swift.String
@_hasMissingDesignatedInitializers final public class AdyenSession {
  public struct Configuration {
    public init(sessionIdentifier: Swift.String, initialSessionData: Swift.String, context: Adyen.AdyenContext, actionComponent: Adyen.AdyenActionComponent.Configuration = .init())
  }
  public struct Context {
    public var data: Swift.String {
      get
    }
    public let identifier: Swift.String
    public let countryCode: Swift.String?
    public let shopperLocale: Swift.String?
    public let amount: Adyen.Amount
    public let paymentMethods: Adyen.PaymentMethods
  }
  final public var sessionContext: Adyen.AdyenSession.Context {
    get
  }
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)? {
    get
  }
  weak final public var delegate: (any Adyen.AdyenSessionDelegate)? {
    get
  }
  public static func initialize(with configuration: Adyen.AdyenSession.Configuration, delegate: any Adyen.AdyenSessionDelegate, presentationDelegate: any Adyen.PresentationDelegate, completion: @escaping ((Swift.Result<Adyen.AdyenSession, any Swift.Error>) -> Swift.Void))
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.AdyenSessionAware {
  @_spi(AdyenInternal) final public var isSession: Swift.Bool {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.InstallmentConfigurationAware {
  @_spi(AdyenInternal) final public var installmentConfiguration: Adyen.InstallmentConfiguration? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.StorePaymentMethodFieldAware {
  @_spi(AdyenInternal) final public var showStorePaymentMethodField: Swift.Bool? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.ActionComponentDelegate {
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didComplete(from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didOpenExternalApplication(component: any Adyen.ActionComponent)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.AdyenSessionPaymentDetailsHandler {
  @_spi(AdyenInternal) final public func didProvide(_ actionComponentData: Adyen.ActionComponentData, from component: any Adyen.ActionComponent, session: Adyen.AdyenSession)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.DropInComponentDelegate {
  @_spi(AdyenInternal) final public func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didComplete(from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from dropInComponent: any Adyen.AnyDropInComponent)
  @_spi(AdyenInternal) final public func didOpenExternalApplication(component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.PartialPaymentDelegate {
  @_spi(AdyenInternal) final public func checkBalance(with data: Adyen.PaymentComponentData, component: any Adyen.Component, completion: @escaping (Swift.Result<Adyen.Balance, any Swift.Error>) -> Swift.Void)
  @_spi(AdyenInternal) final public func requestOrder(for component: any Adyen.Component, completion: @escaping (Swift.Result<Adyen.PartialPaymentOrder, any Swift.Error>) -> Swift.Void)
  @_spi(AdyenInternal) final public func cancelOrder(_ order: Adyen.PartialPaymentOrder, component: any Adyen.Component)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.PaymentComponentDelegate {
  @_spi(AdyenInternal) final public func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.AdyenSessionPaymentsHandler {
  @_spi(AdyenInternal) final public func didSubmit(_ paymentComponentData: Adyen.PaymentComponentData, from component: any Adyen.Component, dropInComponent: (any Adyen.AnyDropInComponent)?, session: Adyen.AdyenSession)
}
@_spi(AdyenInternal) extension Adyen.AdyenSession : Adyen.SessionStoredPaymentMethodsDelegate {
  @_spi(AdyenInternal) final public var showRemovePaymentMethodButton: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public func disable(storedPaymentMethod: any Adyen.StoredPaymentMethod, dropInComponent: any Adyen.AnyDropInComponent, completion: @escaping Adyen.Completion<Swift.Bool>)
  @_spi(AdyenInternal) final public func disable(storedPaymentMethod: any Adyen.StoredPaymentMethod, completion: @escaping Adyen.Completion<Swift.Bool>)
}
@_spi(AdyenInternal) public protocol AdyenSessionAware {
  @_spi(AdyenInternal) var isSession: Swift.Bool { get }
}
public protocol AdyenSessionDelegate : AnyObject {
  func didComplete(with result: Adyen.AdyenSessionResult, component: any Adyen.Component, session: Adyen.AdyenSession)
  func didFail(with error: any Swift.Error, from component: any Adyen.Component, session: Adyen.AdyenSession)
  func didOpenExternalApplication(component: any Adyen.ActionComponent, session: Adyen.AdyenSession)
  func handlerForPayments(in component: any Adyen.PaymentComponent, session: Adyen.AdyenSession) -> (any Adyen.AdyenSessionPaymentsHandler)?
  func handlerForAdditionalDetails(in component: any Adyen.ActionComponent, session: Adyen.AdyenSession) -> (any Adyen.AdyenSessionPaymentDetailsHandler)?
}
extension Adyen.AdyenSessionDelegate {
  public func handlerForPayments(in component: any Adyen.PaymentComponent, session: Adyen.AdyenSession) -> (any Adyen.AdyenSessionPaymentsHandler)?
  public func handlerForAdditionalDetails(in component: any Adyen.ActionComponent, session: Adyen.AdyenSession) -> (any Adyen.AdyenSessionPaymentDetailsHandler)?
  public func didOpenExternalApplication(component: any Adyen.ActionComponent, session: Adyen.AdyenSession)
}
public protocol AdyenSessionPaymentsHandler {
  func didSubmit(_ paymentComponentData: Adyen.PaymentComponentData, from component: any Adyen.Component, dropInComponent: (any Adyen.AnyDropInComponent)?, session: Adyen.AdyenSession)
}
public protocol AdyenSessionPaymentDetailsHandler {
  func didProvide(_ actionComponentData: Adyen.ActionComponentData, from component: any Adyen.ActionComponent, session: Adyen.AdyenSession)
}
public enum SessionPaymentResultCode : Swift.String {
  case authorised
  case refused
  case pending
  case cancelled
  case error
  case received
  case presentToShopper
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AdyenSessionResult {
  public let resultCode: Adyen.SessionPaymentResultCode
  public let encodedResult: Swift.String?
}
@_spi(AdyenInternal) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ADYViewController : UIKit.UIViewController {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(view: UIKit.UIView, title: Swift.String? = nil)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var preferredContentSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @objc deinit
}
final public class AffirmComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.AffirmComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @_spi(AdyenInternal) override final public func phoneExtensions() -> [Adyen.PhoneExtension]
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AffirmComponent : Adyen.AdyenObserver {
}
public struct AffirmDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let shopperName: Adyen.ShopperName?
  public let telephoneNumber: Swift.String?
  public let emailAddress: Swift.String?
  public let billingAddress: Adyen.PostalAddress?
  public let deliveryAddress: Adyen.PostalAddress?
  public init(paymentMethod: any Adyen.PaymentMethod, shopperName: Adyen.ShopperName, telephoneNumber: Swift.String, emailAddress: Swift.String, billingAddress: Adyen.PostalAddress, deliveryAddress: Adyen.PostalAddress?)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AffirmPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) final public class AlreadyPaidPaymentComponent : Adyen.PaymentComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  @_spi(AdyenInternal) final public let paymentMethod: any Adyen.PaymentMethod
  @_spi(AdyenInternal) weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  @_spi(AdyenInternal) public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext)
  @_spi(AdyenInternal) @objc deinit
}
public struct Amount : Swift.Codable, Swift.Equatable {
  public let value: Swift.Int
  public let currencyCode: Swift.String
  public var localeIdentifier: Swift.String?
  public init(value: Swift.Int, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil)
  public init(value: Foundation.Decimal, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil)
  public static func == (a: Adyen.Amount, b: Adyen.Amount) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Adyen.Amount {
  public var formatted: Swift.String {
    get
  }
  @_spi(AdyenInternal) public var formattedComponents: Adyen.AmountComponents {
    get
  }
}
@_spi(AdyenInternal) extension Adyen.Amount : Swift.Comparable {
  @_spi(AdyenInternal) public static func < (lhs: Adyen.Amount, rhs: Adyen.Amount) -> Swift.Bool
  @_spi(AdyenInternal) public static func <= (lhs: Adyen.Amount, rhs: Adyen.Amount) -> Swift.Bool
  @_spi(AdyenInternal) public static func >= (lhs: Adyen.Amount, rhs: Adyen.Amount) -> Swift.Bool
  @_spi(AdyenInternal) public static func > (lhs: Adyen.Amount, rhs: Adyen.Amount) -> Swift.Bool
}
@_spi(AdyenInternal) public struct AmountComponents {
  @_spi(AdyenInternal) public let formattedValue: Swift.String
  @_spi(AdyenInternal) public let formattedCurrencySymbol: Swift.String
}
@_hasMissingDesignatedInitializers final public class AmountFormatter {
  public static func formatted(amount: Swift.Int, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil) -> Swift.String?
  public static func minorUnitAmount(from majorUnitAmount: Swift.Double, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil) -> Swift.Int
  public static func minorUnitAmount(from majorUnitAmount: Foundation.Decimal, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil) -> Swift.Int
  public static func decimalAmount(_ amount: Swift.Int, currencyCode: Swift.String, localeIdentifier: Swift.String? = nil) -> Foundation.NSDecimalNumber
  @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers public class Analytics {
  @_spi(AdyenInternal) public enum Flavor : Swift.String {
    @_spi(AdyenInternal) case components, dropin
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public struct Event {
    @_spi(AdyenInternal) public init(component: Swift.String, flavor: Adyen.Analytics.Flavor, environment: any AdyenNetworking.AnyAPIEnvironment)
    @_spi(AdyenInternal) public init(component: Swift.String, flavor: Adyen.Analytics.Flavor, context: Adyen.APIContext)
  }
  @_spi(AdyenInternal) public static var isEnabled: Swift.Bool
  @_spi(AdyenInternal) public static func sendEvent(component: Swift.String, flavor: Adyen.Analytics.Flavor, environment: any AdyenNetworking.AnyAPIEnvironment)
  @_spi(AdyenInternal) public static func sendEvent(component: Swift.String, flavor: Adyen.Analytics.Flavor, context: Adyen.APIContext)
  @_spi(AdyenInternal) public static func sendEvent(_ event: Adyen.Analytics.Event)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public enum AnalyticsConstants {
  @_spi(AdyenInternal) public static let fetchCheckoutAttemptIdFailed: Swift.String
  @_spi(AdyenInternal) public enum ValidationErrorCodes {
    @_spi(AdyenInternal) public static let cardNumberEmpty: Swift.Int
    @_spi(AdyenInternal) public static let cardNumberPartial: Swift.Int
    @_spi(AdyenInternal) public static let cardLuhnCheckFailed: Swift.Int
    @_spi(AdyenInternal) public static let cardUnsupported: Swift.Int
    @_spi(AdyenInternal) public static let expiryDateEmpty: Swift.Int
    @_spi(AdyenInternal) public static let expiryDatePartial: Swift.Int
    @_spi(AdyenInternal) public static let cardExpired: Swift.Int
    @_spi(AdyenInternal) public static let expiryDateTooFar: Swift.Int
    @_spi(AdyenInternal) public static let securityCodeEmpty: Swift.Int
    @_spi(AdyenInternal) public static let securityCodePartial: Swift.Int
    @_spi(AdyenInternal) public static let holderNameEmpty: Swift.Int
    @_spi(AdyenInternal) public static let brazilSSNEmpty: Swift.Int
    @_spi(AdyenInternal) public static let brazilSSNPartial: Swift.Int
    @_spi(AdyenInternal) public static let postalCodeEmpty: Swift.Int
    @_spi(AdyenInternal) public static let postalCodePartial: Swift.Int
    @_spi(AdyenInternal) public static let kcpPasswordEmpty: Swift.Int
    @_spi(AdyenInternal) public static let kcpPasswordPartial: Swift.Int
    @_spi(AdyenInternal) public static let kcpFieldEmpty: Swift.Int
    @_spi(AdyenInternal) public static let kcpFieldPartial: Swift.Int
  }
}
@_spi(AdyenInternal) public struct AnalyticsContext {
  @_spi(AdyenInternal) public init(version: Swift.String = adyenSdkVersion, platform: Adyen.AnalyticsContext.Platform = .iOS)
}
@_spi(AdyenInternal) extension Adyen.AnalyticsContext {
  @_spi(AdyenInternal) public enum Platform : Swift.String {
    @_spi(AdyenInternal) case iOS
    @_spi(AdyenInternal) case reactNative
    @_spi(AdyenInternal) case flutter
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
}
@_spi(AdyenInternal) public enum AnalyticsEnvironment : Swift.String, AdyenNetworking.AnyAPIEnvironment {
  @_spi(AdyenInternal) case test
  @_spi(AdyenInternal) case liveEurope
  @_spi(AdyenInternal) case liveAustralia
  @_spi(AdyenInternal) case liveUnitedStates
  @_spi(AdyenInternal) case liveApse
  @_spi(AdyenInternal) case liveIndia
  @_spi(AdyenInternal) case beta
  @_spi(AdyenInternal) case local
  @_spi(AdyenInternal) public var baseURL: Foundation.URL {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init?(rawValue: Swift.String)
  @_spi(AdyenInternal) public typealias RawValue = Swift.String
  @_spi(AdyenInternal) public var rawValue: Swift.String {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct AnalyticsEventError : Adyen.AnalyticsEvent {
  @_spi(AdyenInternal) public var id: Swift.String
  @_spi(AdyenInternal) public var timestamp: Swift.Int
  @_spi(AdyenInternal) public var component: Swift.String
  @_spi(AdyenInternal) public var type: Adyen.AnalyticsEventError.ErrorType
  @_spi(AdyenInternal) public var code: Swift.String?
  @_spi(AdyenInternal) public var message: Swift.String?
  @_spi(AdyenInternal) public enum ErrorType : Swift.String, Swift.Encodable {
    @_spi(AdyenInternal) case network
    @_spi(AdyenInternal) case implementation
    @_spi(AdyenInternal) case `internal`
    @_spi(AdyenInternal) case api
    @_spi(AdyenInternal) case sdk
    @_spi(AdyenInternal) case thirdParty
    @_spi(AdyenInternal) case generic
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public init(component: Swift.String, type: Adyen.AnalyticsEventError.ErrorType)
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public struct AnalyticsEventInfo : Adyen.AnalyticsEvent {
  @_spi(AdyenInternal) public var id: Swift.String
  @_spi(AdyenInternal) public var timestamp: Swift.Int
  @_spi(AdyenInternal) public var component: Swift.String
  @_spi(AdyenInternal) public var type: Adyen.AnalyticsEventInfo.InfoType
  @_spi(AdyenInternal) public var target: Adyen.AnalyticsEventTarget?
  @_spi(AdyenInternal) public var isStoredPaymentMethod: Swift.Bool?
  @_spi(AdyenInternal) public var brand: Swift.String?
  @_spi(AdyenInternal) public var issuer: Swift.String?
  @_spi(AdyenInternal) public var validationErrorCode: Swift.String?
  @_spi(AdyenInternal) public var validationErrorMessage: Swift.String?
  @_spi(AdyenInternal) public var configData: (any Adyen.AnalyticsStringDictionaryConvertible)?
  @_spi(AdyenInternal) public enum InfoType : Swift.String, Swift.Encodable {
    @_spi(AdyenInternal) case selected
    @_spi(AdyenInternal) case focus
    @_spi(AdyenInternal) case unfocus
    @_spi(AdyenInternal) case validationError
    @_spi(AdyenInternal) case rendered
    @_spi(AdyenInternal) case input
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public init(component: Swift.String, type: Adyen.AnalyticsEventInfo.InfoType)
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public protocol AnalyticsStringDictionaryConvertible : Swift.Encodable {
  @_spi(AdyenInternal) var stringOnlyDictionary: [Swift.String : Swift.String]? { get }
}
@_spi(AdyenInternal) extension Adyen.AnalyticsStringDictionaryConvertible {
  @_spi(AdyenInternal) public var stringOnlyDictionary: [Swift.String : Swift.String]? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct AnalyticsEventLog : Adyen.AnalyticsEvent {
  @_spi(AdyenInternal) public var id: Swift.String
  @_spi(AdyenInternal) public var timestamp: Swift.Int
  @_spi(AdyenInternal) public var component: Swift.String
  @_spi(AdyenInternal) public var type: Adyen.AnalyticsEventLog.LogType
  @_spi(AdyenInternal) public var subType: Adyen.AnalyticsEventLog.LogSubType?
  @_spi(AdyenInternal) public var target: Adyen.AnalyticsEventTarget?
  @_spi(AdyenInternal) public var message: Swift.String?
  @_spi(AdyenInternal) public enum LogType : Swift.String, Swift.Encodable {
    @_spi(AdyenInternal) case action
    @_spi(AdyenInternal) case submit
    @_spi(AdyenInternal) case redirect
    @_spi(AdyenInternal) case threeDS2
    @_spi(AdyenInternal) case closed
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public enum LogSubType : Swift.String, Swift.Encodable {
    @_spi(AdyenInternal) case threeDS2
    @_spi(AdyenInternal) case redirect
    @_spi(AdyenInternal) case voucher
    @_spi(AdyenInternal) case await
    @_spi(AdyenInternal) case qrCode
    @_spi(AdyenInternal) case bankTransfer
    @_spi(AdyenInternal) case sdk
    @_spi(AdyenInternal) case fingerprintSent
    @_spi(AdyenInternal) case fingerprintComplete
    @_spi(AdyenInternal) case challengeDataSent
    @_spi(AdyenInternal) case challengeDisplayed
    @_spi(AdyenInternal) case challengeComplete
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public init(component: Swift.String, type: Adyen.AnalyticsEventLog.LogType, subType: Adyen.AnalyticsEventLog.LogSubType? = nil)
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public enum AnalyticsFlavor {
  @_spi(AdyenInternal) case components(type: Adyen.PaymentMethodType)
  @_spi(AdyenInternal) case dropIn(type: Swift.String = "dropin", paymentMethods: [Swift.String])
  @_spi(AdyenInternal) public var value: Swift.String {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public protocol AnalyticsProviderProtocol {
  @_spi(AdyenInternal) var checkoutAttemptId: Swift.String? { get }
  @_spi(AdyenInternal) func sendInitialAnalytics(with flavor: Adyen.AnalyticsFlavor, additionalFields: Adyen.AdditionalAnalyticsFields?)
  @_spi(AdyenInternal) func add(info: Adyen.AnalyticsEventInfo)
  @_spi(AdyenInternal) func add(log: Adyen.AnalyticsEventLog)
  @_spi(AdyenInternal) func add(error: Adyen.AnalyticsEventError)
}
@_spi(AdyenInternal) public protocol AnalyticsValidationError : Adyen.ValidationError {
  @_spi(AdyenInternal) var analyticsErrorCode: Swift.Int { get }
  @_spi(AdyenInternal) var analyticsErrorMessage: Swift.String { get }
}
public protocol AnyCardPaymentMethod : Adyen.PaymentMethod {
  var brands: [Adyen.CardType] { get }
  var fundingSource: Adyen.CardFundingSource? { get }
}
public enum CardFundingSource : Swift.String, Swift.Codable {
  case debit
  case credit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol AnyCashAppPayConfiguration {
  var redirectURL: Foundation.URL { get }
  var referenceId: Swift.String? { get }
  var showsStorePaymentMethodField: Swift.Bool { get }
  var storePaymentMethod: Swift.Bool { get }
}
public protocol AnyDropInComponent : Adyen.PresentableComponent {
  var delegate: (any Adyen.DropInComponentDelegate)? { get set }
  func reload(with order: Adyen.PartialPaymentOrder, _ paymentMethods: Adyen.PaymentMethods) throws
}
public protocol OpaqueEncodable : Swift.Encodable {
  var encodable: Adyen.AnyEncodable { get }
}
extension Adyen.OpaqueEncodable {
  public var encodable: Adyen.AnyEncodable {
    get
  }
}
public struct AnyEncodable : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol AnyVoucherAction {
  var paymentMethodType: Adyen.VoucherPaymentMethod { get }
  var passCreationToken: Swift.String? { get }
  var totalAmount: Adyen.Amount { get }
  var reference: Swift.String { get }
  var expiresAt: Foundation.Date { get }
}
public protocol APIContextInitializable {
  init(context: Adyen.AdyenContext)
}
public protocol AnyWeChatPaySDKActionComponent : Adyen.APIContextInitializable, Adyen.ActionComponent, Adyen.DeviceDependent {
  func handle(_ action: Adyen.WeChatPaySDKAction)
}
@_spi(AdyenInternal) public func loadTheConcreteWeChatPaySDKActionComponentClass() -> (any Adyen.AnyWeChatPaySDKActionComponent.Type)?
public protocol AdyenContextAware : AnyObject {
  var context: Adyen.AdyenContext { get }
}
public struct APIContext : AdyenNetworking.AnyAPIContext {
  public var queryParameters: [Foundation.URLQueryItem] {
    get
  }
  public let headers: [Swift.String : Swift.String]
  public let environment: any AdyenNetworking.AnyAPIEnvironment
  public let clientKey: Swift.String
  public init(environment: any AdyenNetworking.AnyAPIEnvironment, clientKey: Swift.String) throws
}
@_spi(AdyenInternal) public struct APIError : AdyenNetworking.ErrorResponse, Foundation.LocalizedError {
  @_spi(AdyenInternal) public let status: Swift.Int?
  @_spi(AdyenInternal) public let errorCode: Swift.String
  @_spi(AdyenInternal) public let errorMessage: Swift.String
  @_spi(AdyenInternal) public let type: Adyen.APIErrorType
  @_spi(AdyenInternal) public var errorDescription: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public enum APIErrorType : Swift.String, Swift.Decodable {
  @_spi(AdyenInternal) case `internal`
  @_spi(AdyenInternal) case validation
  @_spi(AdyenInternal) case security
  @_spi(AdyenInternal) case configuration
  @_spi(AdyenInternal) case urlError
  @_spi(AdyenInternal) case noInternet
  @_spi(AdyenInternal) case sessionExpired
  @_spi(AdyenInternal) public init?(rawValue: Swift.String)
  @_spi(AdyenInternal) public typealias RawValue = Swift.String
  @_spi(AdyenInternal) public var rawValue: Swift.String {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public protocol APIRequest : AdyenNetworking.Request where Self.ErrorResponseType == Adyen.APIError {
}
@_spi(AdyenInternal) public protocol AnyAppLauncher {
  @_spi(AdyenInternal) func openCustomSchemeUrl(_ url: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
  @_spi(AdyenInternal) func openUniversalAppUrl(_ url: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
}
@_spi(AdyenInternal) public struct AppLauncher : Adyen.AnyAppLauncher {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) public func openCustomSchemeUrl(_ url: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
  @_spi(AdyenInternal) public func openUniversalAppUrl(_ url: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
}
@objc public class ApplePayComponent : ObjectiveC.NSObject, Adyen.PresentableComponent, Adyen.PaymentComponent, Adyen.FinalizableComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak public var delegate: (any Adyen.PaymentComponentDelegate)?
  weak public var applePayDelegate: (any Adyen.ApplePayComponentDelegate)?
  public init(paymentMethod: Adyen.ApplePayPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.ApplePayComponent.Configuration) throws
  public var viewController: UIKit.UIViewController {
    get
  }
  public func didFinalize(with success: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.ApplePayComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.ApplePayComponent : Adyen.ViewControllerDelegate {
}
public protocol ApplePayComponentDelegate : AnyObject {
  func didUpdate(contact: PassKit.PKContact, for payment: Adyen.ApplePayPayment, completion: @escaping (PassKit.PKPaymentRequestShippingContactUpdate) -> Swift.Void)
  func didUpdate(shippingMethod: PassKit.PKShippingMethod, for payment: Adyen.ApplePayPayment, completion: @escaping (PassKit.PKPaymentRequestShippingMethodUpdate) -> Swift.Void)
  @available(iOS 15.0, *)
  func didUpdate(couponCode: Swift.String, for payment: Adyen.ApplePayPayment, completion: @escaping (PassKit.PKPaymentRequestCouponCodeUpdate) -> Swift.Void)
}
extension Adyen.ApplePayComponent {
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case userCannotMakePayment
    case deviceDoesNotSupportApplyPay
    case emptySummaryItems
    case emptyMerchantIdentifier
    case negativeGrandTotal
    case invalidSummaryItem
    case invalidCountryCode
    case invalidCurrencyCode
    case invalidToken
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.ApplePayComponent.Error, b: Adyen.ApplePayComponent.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(AdyenInternal) extension Adyen.ApplePayComponent : PassKit.PKPaymentAuthorizationViewControllerDelegate {
  @_spi(AdyenInternal) @objc dynamic public func paymentAuthorizationViewControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationViewController)
  @_spi(AdyenInternal) @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didAuthorizePayment payment: PassKit.PKPayment, completion: @escaping (PassKit.PKPaymentAuthorizationStatus) -> Swift.Void)
  @_spi(AdyenInternal) @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didSelectShippingContact contact: PassKit.PKContact, handler completion: @escaping (PassKit.PKPaymentRequestShippingContactUpdate) -> Swift.Void)
  @_spi(AdyenInternal) @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didSelect shippingMethod: PassKit.PKShippingMethod, handler completion: @escaping (PassKit.PKPaymentRequestShippingMethodUpdate) -> Swift.Void)
  @_spi(AdyenInternal) @available(iOS 15.0, *)
  @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didChangeCouponCode couponCode: Swift.String, handler completion: @escaping (PassKit.PKPaymentRequestCouponCodeUpdate) -> Swift.Void)
}
extension Adyen.ApplePayComponent {
  public struct Configuration {
    public var applePayPayment: Adyen.ApplePayPayment {
      get
    }
    public let merchantIdentifier: Swift.String
    public var requiredBillingContactFields: Swift.Set<PassKit.PKContactField>
    public var requiredShippingContactFields: Swift.Set<PassKit.PKContactField>
    public var billingContact: PassKit.PKContact?
    public var allowOnboarding: Swift.Bool
    public var shippingContact: PassKit.PKContact?
    public var shippingType: PassKit.PKShippingType
    public var allowShippingContactEditing: Swift.Bool
    public var shippingMethods: [PassKit.PKShippingMethod]?
    public var applicationData: Foundation.Data?
    public var supportedCountries: Swift.Set<Swift.String>?
    public var supportsCouponCode: Swift.Bool
    public var couponCode: Swift.String?
    public var merchantCapability: Adyen.CardFundingSource?
    public init(payment: Adyen.ApplePayPayment, merchantIdentifier: Swift.String)
    public init(paymentRequest: PassKit.PKPaymentRequest, allowOnboarding: Swift.Bool = false) throws
    @_spi(AdyenInternal) public func replacing(amount: Adyen.Amount) -> Adyen.ApplePayComponent.Configuration
  }
}
public struct ApplePayDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let token: Swift.String
  public let network: Swift.String
  public let billingContact: PassKit.PKContact?
  public let shippingContact: PassKit.PKContact?
  public let shippingMethod: PassKit.PKShippingMethod?
  public init(paymentMethod: Adyen.ApplePayPaymentMethod, token: Swift.String, network: Swift.String, billingContact: PassKit.PKContact?, shippingContact: PassKit.PKContact?, shippingMethod: PassKit.PKShippingMethod?)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApplePayPayment {
  public var amountMinorUnits: Swift.Int {
    get
  }
  public var summaryItems: [PassKit.PKPaymentSummaryItem] {
    get
  }
  public var countryCode: Swift.String {
    get
  }
  public var currencyCode: Swift.String {
    get
  }
  public init(countryCode: Swift.String, currencyCode: Swift.String, summaryItems: [PassKit.PKPaymentSummaryItem], localizationParameters: Adyen.LocalizationParameters? = nil) throws
  public init(payment: Adyen.Payment, brand: Swift.String, localizationParameters: Adyen.LocalizationParameters? = nil) throws
}
extension Adyen.ApplePayPayment {
  @_spi(AdyenInternal) public var amount: Adyen.Amount {
    get
  }
}
public struct ApplePayPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let brands: [Swift.String]?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayStyle {
  public var paymentButtonStyle: PassKit.PKPaymentButtonStyle?
  public var paymentButtonType: PassKit.PKPaymentButtonType
  public var cornerRadius: CoreFoundation.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var hintLabel: Adyen.TextStyle
  public init(paymentButtonStyle: PassKit.PKPaymentButtonStyle? = nil, paymentButtonType: PassKit.PKPaymentButtonType = .inStore, cornerRadius: CoreFoundation.CGFloat = 4, backgroundColor: UIKit.UIColor = UIColor.Adyen.componentBackground, hintLabel: Adyen.TextStyle = TextStyle(
            font: .preferredFont(forTextStyle: .footnote),
            color: UIColor.Adyen.componentSecondaryLabel
        ))
}
public enum AppleWalletError : Foundation.LocalizedError {
  case failedToAddToAppleWallet
  public static func == (a: Adyen.AppleWalletError, b: Adyen.AppleWalletError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(AdyenInternal) public struct AppleWalletPassRequest : Adyen.APIRequest {
  @_spi(AdyenInternal) public typealias ResponseType = Adyen.AppleWalletPassResponse
  @_spi(AdyenInternal) public let path: Swift.String
  @_spi(AdyenInternal) public var counter: Swift.UInt
  @_spi(AdyenInternal) public let headers: [Swift.String : Swift.String]
  @_spi(AdyenInternal) public let queryParameters: [Foundation.URLQueryItem]
  @_spi(AdyenInternal) public let method: AdyenNetworking.HTTPMethod
  @_spi(AdyenInternal) public let platform: Swift.String
  @_spi(AdyenInternal) public let passToken: Swift.String
  @_spi(AdyenInternal) public init(passToken: Swift.String)
  @_spi(AdyenInternal) public enum CodingKeys : Swift.CodingKey {
    @_spi(AdyenInternal) case platform
    @_spi(AdyenInternal) case passToken
    @_spi(AdyenInternal) public static func == (a: Adyen.AppleWalletPassRequest.CodingKeys, b: Adyen.AppleWalletPassRequest.CodingKeys) -> Swift.Bool
    @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(AdyenInternal) public init?(stringValue: Swift.String)
    @_spi(AdyenInternal) public init?(intValue: Swift.Int)
    @_spi(AdyenInternal) public var hashValue: Swift.Int {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public var intValue: Swift.Int? {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public var stringValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public typealias ErrorResponseType = Adyen.APIError
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public struct AppleWalletPassResponse : AdyenNetworking.Response {
  @_spi(AdyenInternal) public let passData: Foundation.Data
  @_spi(AdyenInternal) public init(passBase64String: Swift.String) throws
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) extension Adyen.AdyenScope {
  @_spi(AdyenInternal) public subscript<T>(safeIndex index: Swift.Int) -> T? where Base == [T] {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public typealias AssertionListener = (Swift.String) -> Swift.Void
@_spi(AdyenInternal) public enum AdyenAssertion {
  @_spi(AdyenInternal) public static func assertionFailure(message: @autoclosure () -> Swift.String)
  @_spi(AdyenInternal) public static func assert(message: @autoclosure () -> Swift.String, condition: @autoclosure () -> Swift.Bool)
}
final public class AtomeComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.AtomeComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @_spi(AdyenInternal) override final public func phoneExtensions() -> [Adyen.PhoneExtension]
  @_spi(AdyenInternal) override final public func addressViewModelBuilder() -> any Adyen.AddressViewModelBuilder
  @objc deinit
}
public struct AtomeDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let shopperName: Adyen.ShopperName?
  public let telephoneNumber: Swift.String?
  public let billingAddress: Adyen.PostalAddress?
  public init(paymentMethod: any Adyen.PaymentMethod, shopperName: Adyen.ShopperName, telephoneNumber: Swift.String, billingAddress: Adyen.PostalAddress)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AtomePaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AwaitPaymentMethod : Swift.String, Swift.Decodable {
  case mbway
  case blik
  case upicollect
  case upiIntent
  case twint
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AwaitAction : Swift.Decodable {
  public let paymentMethodType: Adyen.AwaitPaymentMethod
  public let paymentData: Swift.String
  public init(paymentData: Swift.String, paymentMethodType: Adyen.AwaitPaymentMethod)
  public init(from decoder: any Swift.Decoder) throws
}
public struct AwaitActionDetails : Adyen.AdditionalDetails {
  public let payload: Swift.String
  public init(payload: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class AwaitComponent : Adyen.ActionComponent, Adyen.Cancellable {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  final public let requiresModalPresentation: Swift.Bool
  public struct Configuration {
    public var style: Adyen.AwaitComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(style: Adyen.AwaitComponentStyle = .init(), localizationParameters: Adyen.LocalizationParameters? = nil)
  }
  final public var configuration: Adyen.AwaitComponent.Configuration
  convenience public init(context: Adyen.AdyenContext, configuration: Adyen.AwaitComponent.Configuration = .init())
  final public func handle(_ action: Adyen.RedirectableAwaitAction)
  final public func didCancel()
  final public func handle(_ action: Adyen.AwaitAction)
  @objc deinit
}
public struct AwaitComponentStyle : Adyen.ViewStyle {
  public var image: Adyen.ImageStyle
  public var message: Adyen.TextStyle
  public var spinnerTitle: Adyen.TextStyle
  public var backgroundColor: UIKit.UIColor
  public init()
}
final public class BACSDirectDebitComponent : Adyen.PaymentComponent, Adyen.PaymentAware, Adyen.PresentableComponent {
  public typealias Configuration = Adyen.BasicComponentConfiguration
  final public let viewController: UIKit.UIViewController
  final public var requiresModalPresentation: Swift.Bool
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  final public var configuration: Adyen.BACSDirectDebitComponent.Configuration
  public init(paymentMethod: Adyen.BACSDirectDebitPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.BACSDirectDebitComponent.Configuration = .init())
  @objc deinit
}
extension Adyen.BACSDirectDebitComponent : Adyen.LoadingComponent {
  final public func stopLoading()
}
extension Adyen.BACSDirectDebitComponent : Adyen.Cancellable {
  final public func didCancel()
}
public struct BACSDirectDebitDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let holderName: Swift.String
  public let bankAccountNumber: Swift.String
  public let bankLocationId: Swift.String
  public init(paymentMethod: Adyen.BACSDirectDebitPaymentMethod, holderName: Swift.String, bankAccountNumber: Swift.String, bankLocationId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct BACSDirectDebitPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Balance {
  public let availableAmount: Adyen.Amount
  public let transactionLimit: Adyen.Amount?
  public init(availableAmount: Adyen.Amount, transactionLimit: Adyen.Amount?)
}
@_spi(AdyenInternal) public struct BalanceChecker {
  @_spi(AdyenInternal) public enum Error : Foundation.LocalizedError {
    @_spi(AdyenInternal) case unexpectedCurrencyCode
    @_spi(AdyenInternal) case zeroBalance
    @_spi(AdyenInternal) public var errorDescription: Swift.String? {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public static func == (a: Adyen.BalanceChecker.Error, b: Adyen.BalanceChecker.Error) -> Swift.Bool
    @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(AdyenInternal) public var hashValue: Swift.Int {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) public struct Result {
    @_spi(AdyenInternal) public let isBalanceEnough: Swift.Bool
    @_spi(AdyenInternal) public let remainingBalanceAmount: Adyen.Amount
    @_spi(AdyenInternal) public let amountToPay: Adyen.Amount
  }
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) public func check(balance: Adyen.Balance, isEnoughToPay amount: Adyen.Amount) throws -> Adyen.BalanceChecker.Result
}
public enum BankDetailsEncryptor {
  public static func encrypt(accountNumber: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(routingNumber: Swift.String, with publicKey: Swift.String) throws -> Swift.String
}
extension Adyen.BankDetailsEncryptor {
  public enum Error : Foundation.LocalizedError {
    case invalidAccountNumber
    case invalidRoutingNumber
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.BankDetailsEncryptor.Error, b: Adyen.BankDetailsEncryptor.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(AdyenInternal) public protocol PickerElement : Swift.CustomStringConvertible, Swift.Equatable {
  @_spi(AdyenInternal) var identifier: Swift.String { get }
}
@_spi(AdyenInternal) public struct BasePickerElement<ElementType> : Adyen.PickerElement where ElementType : Swift.CustomStringConvertible {
  @_spi(AdyenInternal) public let identifier: Swift.String
  @_spi(AdyenInternal) public let element: ElementType
  @_spi(AdyenInternal) public static func == (lhs: Adyen.BasePickerElement<ElementType>, rhs: Adyen.BasePickerElement<ElementType>) -> Swift.Bool
  @_spi(AdyenInternal) public var description: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(identifier: Swift.String, element: ElementType)
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers open class BaseFormPickerItem<ElementType> : Adyen.FormValueItem<Adyen.BasePickerElement<ElementType>, Adyen.FormTextItemStyle>, Adyen.InputViewRequiringFormItem where ElementType : Swift.CustomStringConvertible {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($selectableValues) public var selectableValues: [Adyen.BasePickerElement<ElementType>] {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $selectableValues: Adyen.AdyenObservable<[Adyen.BasePickerElement<ElementType>]> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(preselectedValue: Adyen.BasePickerElement<ElementType>, selectableValues: [Adyen.BasePickerElement<ElementType>], style: Adyen.FormTextItemStyle)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BaseFormPickerItemView<T> : Adyen.FormValueItemView<Adyen.BasePickerElement<T>, Adyen.FormTextItemStyle, Adyen.BaseFormPickerItem<T>>, UIKit.UIPickerViewDelegate, UIKit.UIPickerViewDataSource where T : Swift.CustomStringConvertible, T : Swift.Equatable {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: Adyen.BaseFormPickerItem<T>)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var canBecomeFirstResponder: Swift.Bool {
    @_spi(AdyenInternal) @objc get
  }
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override final public func becomeFirstResponder() -> Swift.Bool
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override final public func resignFirstResponder() -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var inputControl: any Adyen.PickerTextInputControl {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc final public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol PickerTextInputControl : UIKit.UIView {
  @_spi(AdyenInternal) var onDidResignFirstResponder: (() -> Swift.Void)? { get set }
  @_spi(AdyenInternal) var onDidBecomeFirstResponder: (() -> Swift.Void)? { get set }
  @_spi(AdyenInternal) var onDidTap: (() -> Swift.Void)? { get set }
  @_spi(AdyenInternal) var showChevron: Swift.Bool { get set }
  @_spi(AdyenInternal) var label: Swift.String? { get set }
}
public protocol AnyBasicComponentConfiguration : Adyen.Localizable {
}
public protocol AnyPersonalInformationConfiguration : Adyen.AnyBasicComponentConfiguration {
  var shopperInformation: Adyen.PrefilledShopperInformation? { get }
}
public struct BasicComponentConfiguration : Adyen.AnyBasicComponentConfiguration {
  public var style: Adyen.FormComponentStyle
  public var localizationParameters: Adyen.LocalizationParameters?
  public init(style: Adyen.FormComponentStyle = FormComponentStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
}
public struct PersonalInformationConfiguration : Adyen.AnyPersonalInformationConfiguration {
  public var style: Adyen.FormComponentStyle
  public var shopperInformation: Adyen.PrefilledShopperInformation?
  public var localizationParameters: Adyen.LocalizationParameters?
  public init(style: Adyen.FormComponentStyle = FormComponentStyle(), shopperInformation: Adyen.PrefilledShopperInformation? = nil, localizationParameters: Adyen.LocalizationParameters? = nil)
}
final public class BasicPersonalInfoFormComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.BasicPersonalInfoFormComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func phoneExtensions() -> [Adyen.PhoneExtension]
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @objc deinit
}
public typealias EContextATMComponent = Adyen.BasicPersonalInfoFormComponent
public typealias EContextStoreComponent = Adyen.BasicPersonalInfoFormComponent
public typealias EContextOnlineComponent = Adyen.BasicPersonalInfoFormComponent
public typealias SevenElevenComponent = Adyen.BasicPersonalInfoFormComponent
public struct BasicPersonalInfoFormDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public var shopperName: Adyen.ShopperName? {
    get
  }
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let emailAddress: Swift.String?
  public let telephoneNumber: Swift.String?
  public init(paymentMethod: any Adyen.PaymentMethod, firstName: Swift.String, lastName: Swift.String, emailAddress: Swift.String, telephoneNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class BCMCComponent : Adyen.CardComponent {
  public init(paymentMethod: Adyen.BCMCPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.CardComponent.Configuration = .init())
  @objc deinit
}
public struct BCMCPaymentMethod : Adyen.AnyCardPaymentMethod {
  public var type: Adyen.PaymentMethodType {
    get
  }
  public var name: Swift.String {
    get
  }
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation? {
    get
    set
  }
  public var brands: [Adyen.CardType] {
    get
  }
  public var fundingSource: Adyen.CardFundingSource? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
final public class BLIKComponent : Adyen.PaymentComponent, Adyen.PresentableComponent, Adyen.PaymentAware, Adyen.LoadingComponent {
  public typealias Configuration = Adyen.BasicComponentConfiguration
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public var configuration: Adyen.BLIKComponent.Configuration
  final public let requiresModalPresentation: Swift.Bool
  public init(paymentMethod: Adyen.BLIKPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.BLIKComponent.Configuration = .init())
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.BLIKComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.BLIKComponent : Adyen.ViewControllerDelegate {
}
public struct BLIKDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let blikCode: Swift.String
  public init(paymentMethod: any Adyen.PaymentMethod, blikCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct BLIKPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class BoletoComponent : Adyen.PaymentComponent, Adyen.PaymentAware, Adyen.LoadingComponent, Adyen.PresentableComponent, Adyen.AdyenObserver {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  final public let requiresModalPresentation: Swift.Bool
  final public var configuration: Adyen.BoletoComponent.Configuration
  public init(paymentMethod: Adyen.BoletoPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.BoletoComponent.Configuration)
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.BoletoComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.BoletoComponent : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) final public func viewWillAppear(viewController: UIKit.UIViewController)
}
@_spi(AdyenInternal) extension Adyen.BoletoComponent : Adyen.PaymentComponentDelegate {
  @_spi(AdyenInternal) final public func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent)
}
extension Adyen.BoletoComponent {
  public struct Configuration : Adyen.AnyPersonalInformationConfiguration {
    public let style: Adyen.FormComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public let shopperInformation: Adyen.PrefilledShopperInformation?
    public init(style: Adyen.FormComponentStyle = FormComponentStyle(), localizationParameters: Adyen.LocalizationParameters? = nil, shopperInformation: Adyen.PrefilledShopperInformation?, showEmailAddress: Swift.Bool)
  }
}
public struct BoletoDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let shopperName: Adyen.ShopperName?
  public let socialSecurityNumber: Swift.String?
  public let emailAddress: Swift.String?
  public let billingAddress: Adyen.PostalAddress?
  public let telephoneNumber: Swift.String?
  public init(type: Adyen.PaymentMethodType, shopperName: Adyen.ShopperName, socialSecurityNumber: Swift.String, emailAddress: Swift.String?, billingAddress: Adyen.PostalAddress)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct BoletoPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class BoletoVoucherAction : Swift.Decodable, Adyen.AnyVoucherAction {
  final public let paymentMethodType: Adyen.VoucherPaymentMethod
  final public let totalAmount: Adyen.Amount
  final public let reference: Swift.String
  final public let expiresAt: Foundation.Date
  final public let downloadUrl: Foundation.URL
  @_spi(AdyenInternal) final public let passCreationToken: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers final public class BrazilSocialSecurityNumberFormatter : Adyen.NumericFormatter {
  override final public func formattedValue(for value: Swift.String) -> Swift.String
  override public init()
  @objc deinit
}
@_spi(AdyenInternal) final public class BrazilSocialSecurityNumberValidator : Adyen.CombinedValidator, Adyen.StatusValidator {
  @_spi(AdyenInternal) final public let firstValidator: any Adyen.Validator
  @_spi(AdyenInternal) final public let secondValidator: any Adyen.Validator
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @objc deinit
}
public struct BrowserInfo : Swift.Encodable {
  public var userAgent: Swift.String?
  public static func initialize(completion: @escaping ((_ info: Adyen.BrowserInfo?) -> Swift.Void))
  public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) extension Foundation.Bundle : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = Foundation.Bundle
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : Foundation.Bundle {
  @_spi(AdyenInternal) public func isSchemeConfigured(_ scheme: Swift.String) -> Swift.Bool
}
@_spi(AdyenInternal) extension Foundation.Bundle {
  @_spi(AdyenInternal) public enum Adyen {
    @_spi(AdyenInternal) public static var localizedEditCopy: Swift.String {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public static var localizedDoneCopy: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
}
public struct ButtonStyle : Adyen.ViewStyle, Swift.Equatable {
  public var title: Adyen.TextStyle
  public var cornerRounding: Adyen.CornerRounding
  public var borderColor: UIKit.UIColor?
  public var borderWidth: CoreFoundation.CGFloat
  public var backgroundColor: UIKit.UIColor
  public init(title: Adyen.TextStyle)
  public init(title: Adyen.TextStyle, cornerRadius: CoreFoundation.CGFloat)
  public init(title: Adyen.TextStyle, cornerRounding: Adyen.CornerRounding)
  public init(title: Adyen.TextStyle, cornerRadius: CoreFoundation.CGFloat, background: UIKit.UIColor)
  public init(title: Adyen.TextStyle, cornerRounding: Adyen.CornerRounding, background: UIKit.UIColor)
  public static func == (a: Adyen.ButtonStyle, b: Adyen.ButtonStyle) -> Swift.Bool
}
@_spi(AdyenInternal) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CancellingToolBar : Adyen.ModalToolbar {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public init(title: Swift.String?, style: Adyen.NavigationStyle)
  @_spi(AdyenInternal) @objc deinit
}
public struct Card {
  public var number: Swift.String?
  public var securityCode: Swift.String?
  public var expiryMonth: Swift.String?
  public var expiryYear: Swift.String?
  public var holder: Swift.String?
  public init(number: Swift.String? = nil, securityCode: Swift.String? = nil, expiryMonth: Swift.String? = nil, expiryYear: Swift.String? = nil, holder: Swift.String? = nil)
}
public struct CardBrand : Swift.Decodable {
  public let type: Adyen.CardType
  public let isSupported: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
extension Adyen.CardBrand : Swift.Equatable {
  public static func == (a: Adyen.CardBrand, b: Adyen.CardBrand) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class CardComponent : Adyen.PresentableComponent, Adyen.PaymentMethodAware, Adyen.PaymentAware, Adyen.LoadingComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  @_spi(AdyenInternal) final public let publicKeyProvider: any Adyen.AnyPublicKeyProvider
  public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak public var cardComponentDelegate: (any Adyen.CardComponentDelegate)?
  final public let supportedCardTypes: [Adyen.CardType]
  public var configuration: Adyen.CardComponent.Configuration {
    get
  }
  weak public var delegate: (any Adyen.PaymentComponentDelegate)? {
    get
    set
  }
  public var order: Adyen.PartialPaymentOrder? {
    get
    set
  }
  convenience public init(paymentMethod: any Adyen.AnyCardPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.CardComponent.Configuration = .init())
  public var viewController: UIKit.UIViewController {
    get
  }
  public var requiresModalPresentation: Swift.Bool {
    get
  }
  public func stopLoading()
  public func update(storePaymentMethodFieldVisibility isVisible: Swift.Bool)
  public func update(storePaymentMethodFieldValue isOn: Swift.Bool)
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardComponent : Adyen.PublicKeyConsumer {
}
public struct BillingAddressConfiguration {
  public init()
  public var mode: Adyen.CardComponent.AddressFormType
  public var countryCodes: [Swift.String]?
  public var requirementPolicy: Adyen.BillingAddressConfiguration.RequirementPolicy
  public enum RequirementPolicy {
    case required
    case optional
    case optionalForCardTypes(Swift.Set<Adyen.CardType>)
  }
  @_spi(AdyenInternal) public func isOptional(for cardTypes: [Adyen.CardType]) -> Swift.Bool
}
public protocol AnyCardComponentConfiguration {
  var showsHolderNameField: Swift.Bool { get }
  var showsStorePaymentMethodField: Swift.Bool { get }
  var showsSecurityCodeField: Swift.Bool { get }
  var showsSubmitButton: Swift.Bool { get }
  var koreanAuthenticationMode: Adyen.CardComponent.FieldVisibility { get }
  var socialSecurityNumberMode: Adyen.CardComponent.FieldVisibility { get }
  var billingAddress: Adyen.BillingAddressConfiguration { get }
  var stored: Adyen.StoredCardConfiguration { get }
  var allowedCardTypes: [Adyen.CardType]? { get }
  var installmentConfiguration: Adyen.InstallmentConfiguration? { get }
}
extension Adyen.CardComponent {
  public enum AddressFormType {
    case lookup(provider: any Adyen.AddressLookupProvider)
    case full
    case postalCode
    case none
  }
  public enum FieldVisibility : Swift.String, Swift.Codable, Swift.CaseIterable {
    case show
    case hide
    case auto
    public init?(rawValue: Swift.String)
    public typealias AllCases = [Adyen.CardComponent.FieldVisibility]
    public typealias RawValue = Swift.String
    public static var allCases: [Adyen.CardComponent.FieldVisibility] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Configuration : Adyen.AnyCardComponentConfiguration, Adyen.AnyPersonalInformationConfiguration {
    public var style: Adyen.FormComponentStyle
    public var shopperInformation: Adyen.PrefilledShopperInformation?
    public var localizationParameters: Adyen.LocalizationParameters?
    public var showsHolderNameField: Swift.Bool
    public var showsStorePaymentMethodField: Swift.Bool
    public var showsSecurityCodeField: Swift.Bool
    public var showsSubmitButton: Swift.Bool
    public var koreanAuthenticationMode: Adyen.CardComponent.FieldVisibility
    public var socialSecurityNumberMode: Adyen.CardComponent.FieldVisibility
    public var stored: Adyen.StoredCardConfiguration
    public var allowedCardTypes: [Adyen.CardType]?
    public var showsSupportedCardLogos: Swift.Bool
    public var installmentConfiguration: Adyen.InstallmentConfiguration?
    public var billingAddress: Adyen.BillingAddressConfiguration
    public init(style: Adyen.FormComponentStyle = FormComponentStyle(), shopperInformation: Adyen.PrefilledShopperInformation? = nil, localizationParameters: Adyen.LocalizationParameters? = nil, showsHolderNameField: Swift.Bool = false, showsStorePaymentMethodField: Swift.Bool = true, showsSecurityCodeField: Swift.Bool = true, showsSubmitButton: Swift.Bool = true, koreanAuthenticationMode: Adyen.CardComponent.FieldVisibility = .auto, socialSecurityNumberMode: Adyen.CardComponent.FieldVisibility = .auto, storedCardConfiguration: Adyen.StoredCardConfiguration = StoredCardConfiguration(), allowedCardTypes: [Adyen.CardType]? = nil, installmentConfiguration: Adyen.InstallmentConfiguration? = nil, billingAddress: Adyen.BillingAddressConfiguration = .init())
  }
}
public protocol CardComponentDelegate : AnyObject {
  func didChangeBIN(_ value: Swift.String, component: Adyen.CardComponent)
  func didChangeCardBrand(_ value: [Adyen.CardBrand]?, component: Adyen.CardComponent)
  func didSubmit(lastFour: Swift.String, finalBIN: Swift.String, component: Adyen.CardComponent)
}
extension Adyen.CardComponentDelegate {
  public func didSubmit(lastFour value: Swift.String, component: Adyen.CardComponent)
}
@_spi(AdyenInternal) extension Adyen.CardComponent : Adyen.PaymentComponent, Adyen.TrackableComponent {
  @_spi(AdyenInternal) public func sendDidLoadEvent()
}
@_spi(AdyenInternal) extension Adyen.CardComponent : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) public func viewDidLoad(viewController: UIKit.UIViewController)
}
public struct CardDetails : Adyen.PaymentMethodDetails, Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let storedPaymentMethodIdentifier: Swift.String?
  public let encryptedCardNumber: Swift.String?
  public let encryptedExpiryMonth: Swift.String?
  public let encryptedExpiryYear: Swift.String?
  public let encryptedSecurityCode: Swift.String?
  public let holderName: Swift.String?
  public let fundingSource: Adyen.CardFundingSource?
  public let billingAddress: Adyen.PostalAddress?
  public let password: Swift.String?
  public let taxNumber: Swift.String?
  public let socialSecurityNumber: Swift.String?
  public let threeDS2SDKVersion: Swift.String
  public let selectedBrand: Swift.String?
  public let delegatedAuthenticationData: Adyen.DelegatedAuthenticationData?
  public init(paymentMethod: any Adyen.AnyCardPaymentMethod, encryptedCard: Adyen.EncryptedCard, holderName: Swift.String? = nil, selectedBrand: Swift.String? = nil, billingAddress: Adyen.PostalAddress? = nil, kcpDetails: Adyen.KCPDetails? = nil, socialSecurityNumber: Swift.String? = nil, delegatedAuthenticationData: Adyen.DelegatedAuthenticationData? = nil)
  public init(paymentMethod: Adyen.StoredCardPaymentMethod, encryptedSecurityCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) extension Adyen.CardDetails : Adyen.DelegatedAuthenticationAware {
}
public enum CardEncryptor {
  public static func encrypt(card: Adyen.Card, with publicKey: Swift.String) throws -> Adyen.EncryptedCard
  public static func encrypt(number: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(securityCode: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(expirationMonth: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(expirationYear: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(bin: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encrypt(password: Swift.String, with publicKey: Swift.String) throws -> Swift.String
  public static func encryptToken(from card: Adyen.Card, with publicKey: Swift.String) throws -> Swift.String
}
extension Adyen.CardEncryptor {
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case encryptionFailed
    case invalidCard
    case invalidBin
    case invalidExpiryYear
    case invalidExpiryMonth
    case invalidSecureCode
    case invalidNumber
    case emptyValue
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.CardEncryptor.Error, b: Adyen.CardEncryptor.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_inheritsConvenienceInitializers final public class CardExpiryDateFormatter : Adyen.NumericFormatter {
  override final public func sanitizedValue(for value: Swift.String) -> Swift.String
  override final public func formattedValue(for value: Swift.String) -> Swift.String
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CardExpiryDateValidator : Adyen.Validator {
  public init()
  final public func isValid(_ string: Swift.String) -> Swift.Bool
  final public func maximumLength(for value: Swift.String) -> Swift.Int
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardExpiryDateValidator : Adyen.StatusValidator {
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class CardHolderNameValidator : Adyen.StatusValidator {
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) final public func maximumLength(for value: Swift.String) -> Swift.Int
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class CardKCPFieldValidator : Adyen.CombinedValidator, Adyen.StatusValidator {
  @_spi(AdyenInternal) final public let firstValidator: any Adyen.Validator
  @_spi(AdyenInternal) final public let secondValidator: any Adyen.Validator
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class CardKCPPasswordValidator : Adyen.LengthValidator, Adyen.StatusValidator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
  @_spi(AdyenInternal) override final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @objc deinit
}
@_inheritsConvenienceInitializers final public class CardNumberFormatter : Adyen.NumericFormatter {
  final public var cardType: Adyen.CardType?
  override final public func formattedValue(for value: Swift.String) -> Swift.String
  override public init()
  @objc deinit
}
final public class CardNumberValidator : Adyen.Validator {
  public init(isLuhnCheckEnabled: Swift.Bool, isEnteredBrandSupported: Swift.Bool, panLength: Swift.Int? = nil)
  final public func isValid(_ value: Swift.String) -> Swift.Bool
  final public func maximumLength(for value: Swift.String) -> Swift.Int
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardNumberValidator : Adyen.StatusValidator {
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
}
public struct CardPaymentMethod : Adyen.AnyCardPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let fundingSource: Adyen.CardFundingSource?
  public let brands: [Adyen.CardType]
  public init(from decoder: any Swift.Decoder) throws
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct StoredCardPaymentMethod : Adyen.StoredPaymentMethod, Adyen.AnyCardPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public var brands: [Adyen.CardType] {
    get
  }
  public var fundingSource: Adyen.CardFundingSource?
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  public let brand: Adyen.CardType
  public let lastFour: Swift.String
  public let expiryMonth: Swift.String
  public let expiryYear: Swift.String
  public let holderName: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers final public class CardSecurityCodeFormatter : Adyen.NumericFormatter {
  override public init()
  public init(publisher: Adyen.AdyenObservable<Adyen.CardType?>)
  public init(cardType: Adyen.CardType)
  override final public func formattedValue(for value: Swift.String) -> Swift.String
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardSecurityCodeFormatter : Adyen.AdyenObserver {
}
final public class CardSecurityCodeValidator : Adyen.NumericStringValidator, Adyen.AdyenObserver {
  public init()
  public init(publisher: Adyen.AdyenObservable<Adyen.CardType?>)
  public init(cardType: Adyen.CardType)
  override final public func isValid(_ value: Swift.String) -> Swift.Bool
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardSecurityCodeValidator : Adyen.StatusValidator {
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
}
public enum CardType : Swift.RawRepresentable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  case accel
  case alphaBankBonusMasterCard
  case alphaBankBonusVISA
  case argencard
  case americanExpress
  case bcmc
  case bijenkorfCard
  case cabal
  case carteBancaire
  case cencosud
  case chequeDejeneur
  case chinaUnionPay
  case codensa
  case creditUnion24
  case dankort
  case dankortVISA
  case diners
  case discover
  case elo
  case forbrugsforeningen
  case hiper
  case hipercard
  case jcb
  case karenMillen
  case kcp
  case koreanLocalCard
  case laser
  case maestro
  case maestroUK
  case masterCard
  case mir
  case naranja
  case netplus
  case nyce
  case oasis
  case pulse
  case shopping
  case solo
  case star
  case troy
  case uatp
  case visa
  case warehouse
  case other(named: Swift.String)
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  @_spi(AdyenInternal) public var name: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension Adyen.CardType {
  @_spi(AdyenInternal) public func matches(cardNumber: Swift.String) -> Swift.Bool
}
@_spi(AdyenInternal) extension Swift.Array : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = Swift.Array<Element>
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == [Adyen.CardType] {
  @_spi(AdyenInternal) public func types(forCardNumber cardNumber: Swift.String) -> [Adyen.CardType]
  @_spi(AdyenInternal) public func type(forCardNumber cardNumber: Swift.String) -> Adyen.CardType?
}
public protocol CardViewControllerProtocol {
  func update(storePaymentMethodFieldVisibility isVisible: Swift.Bool)
  func update(storePaymentMethodFieldValue isOn: Swift.Bool)
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) public class CardViewController : Adyen.FormViewController {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var enableAutoFitSize: Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var items: Adyen.CardViewController.ItemsProvider {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(configuration: Adyen.CardComponent.Configuration, shopperInformation: Adyen.PrefilledShopperInformation?, formStyle: Adyen.FormComponentStyle, payment: Adyen.Payment?, logoProvider: Adyen.LogoURLProvider, supportedCardTypes: [Adyen.CardType], initialCountryCode: Swift.String, scope: Swift.String, localizationParameters: Adyen.LocalizationParameters?)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var card: Adyen.Card {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var selectedBrand: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var cardBIN: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var validAddress: Adyen.PostalAddress? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var kcpDetails: Adyen.KCPDetails? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var socialSecurityNumber: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var storePayment: Swift.Bool? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var installments: Adyen.Installments? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func stopLoading()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func startLoading()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.CardViewController : Adyen.CardViewControllerProtocol {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func update(storePaymentMethodFieldVisibility isVisible: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func update(storePaymentMethodFieldValue isOn: Swift.Bool)
}
@_spi(AdyenInternal) extension Adyen.CardViewController {
  @_spi(AdyenInternal) public struct InfoEventData {
    @_spi(AdyenInternal) public let type: Adyen.AnalyticsEventInfo.InfoType
    @_spi(AdyenInternal) public let target: Adyen.AnalyticsEventTarget
    @_spi(AdyenInternal) public let error: (any Adyen.AnalyticsValidationError)?
  }
  @_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class ItemsProvider {
    @_spi(AdyenInternal) final public var onDidTriggerInfoEvent: ((Adyen.CardViewController.InfoEventData) -> Swift.Void)?
    @_spi(AdyenInternal) final public var numberContainerItem: Adyen.FormCardNumberContainerItem {
      @_spi(AdyenInternal) get
      @_spi(AdyenInternal) set
    }
    @_spi(AdyenInternal) final public var expiryDateItem: Adyen.FormCardExpiryDateItem {
      @_spi(AdyenInternal) get
      @_spi(AdyenInternal) set
    }
    @_spi(AdyenInternal) final public var securityCodeItem: Adyen.FormCardSecurityCodeItem {
      @_spi(AdyenInternal) get
      @_spi(AdyenInternal) set
    }
    @_spi(AdyenInternal) @objc deinit
  }
}
public struct CashAppPayPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public let clientId: Swift.String
  public let scopeId: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
@_spi(AdyenInternal) public struct ClientKeyRequest : Adyen.APIRequest {
  @_spi(AdyenInternal) public typealias ResponseType = Adyen.ClientKeyResponse
  @_spi(AdyenInternal) public var path: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public let clientKey: Swift.String
  @_spi(AdyenInternal) public var counter: Swift.UInt
  @_spi(AdyenInternal) public let headers: [Swift.String : Swift.String]
  @_spi(AdyenInternal) public let queryParameters: [Foundation.URLQueryItem]
  @_spi(AdyenInternal) public let method: AdyenNetworking.HTTPMethod
  @_spi(AdyenInternal) public init(clientKey: Swift.String)
  @_spi(AdyenInternal) public typealias ErrorResponseType = Adyen.APIError
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public struct ClientKeyResponse : AdyenNetworking.Response {
  @_spi(AdyenInternal) public let cardPublicKey: Swift.String
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
public enum ClientKeyError : Swift.Error, Foundation.LocalizedError {
  case invalidClientKey
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: Adyen.ClientKeyError, b: Adyen.ClientKeyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(AdyenInternal) final public class ClientKeyValidator : Adyen.RegularExpressionValidator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) @objc deinit
}
public typealias Completion<T> = (T) -> Swift.Void
public protocol Component : Adyen.AdyenContextAware {
}
extension Adyen.Component {
  public func finalizeIfNeeded(with success: Swift.Bool, completion: (() -> Swift.Void)?)
  public func cancelIfNeeded()
  public func stopLoadingIfNeeded()
}
public protocol FinalizableComponent : Adyen.Component {
  func didFinalize(with success: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension Adyen.Component {
  @_spi(AdyenInternal) public var _isDropIn: Swift.Bool {
    get
    set
  }
}
public enum ComponentError : Swift.Error {
  case cancelled
  case paymentMethodNotSupported
  public static func == (a: Adyen.ComponentError, b: Adyen.ComponentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(body: UIKit.UIView, padding: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) final public func setupConstraints()
  @objc deinit
}
@_spi(AdyenInternal) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CopyLabelView : UIKit.UIView, Adyen.Localizable {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var localizationParameters: Adyen.LocalizationParameters?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(text: Swift.String, style: Adyen.TextStyle)
  @_spi(AdyenInternal) @objc deinit
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var canBecomeFirstResponder: Swift.Bool {
    @_spi(AdyenInternal) @objc get
  }
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override final public func becomeFirstResponder() -> Swift.Bool
}
@_spi(AdyenInternal) extension Foundation.Bundle {
  @_spi(AdyenInternal) public static let coreInternalResources: Foundation.Bundle
}
extension UIKit.UIColor {
  public enum Adyen {
    public static var dimmBackground: UIKit.UIColor {
      get
    }
    public static var componentBackground: UIKit.UIColor {
      get
    }
    public static var secondaryComponentBackground: UIKit.UIColor {
      get
    }
    public static var componentLabel: UIKit.UIColor {
      get
    }
    public static var componentSecondaryLabel: UIKit.UIColor {
      get
    }
    public static var componentTertiaryLabel: UIKit.UIColor {
      get
    }
    public static var componentQuaternaryLabel: UIKit.UIColor {
      get
    }
    public static var componentPlaceholderText: UIKit.UIColor {
      get
    }
    public static var componentSeparator: UIKit.UIColor {
      get
    }
    public static var componentLoadingMessageColor: UIKit.UIColor {
      get
    }
    public static var paidSectionFooterTitleColor: UIKit.UIColor {
      get
    }
    public static var paidSectionFooterTitleBackgroundColor: UIKit.UIColor {
      get
    }
    public static let defaultBlue: UIKit.UIColor
    public static let defaultRed: UIKit.UIColor
    public static let errorRed: UIKit.UIColor
    public static let lightGray: UIKit.UIColor
    public static let green40: UIKit.UIColor
  }
}
public enum CornerRounding {
  case none
  case fixed(CoreFoundation.CGFloat)
  case percent(CoreFoundation.CGFloat)
}
@_spi(AdyenInternal) extension Adyen.CornerRounding : Swift.Equatable {
  @_spi(AdyenInternal) public static func == (lhs: Adyen.CornerRounding, rhs: Adyen.CornerRounding) -> Swift.Bool
}
@_spi(AdyenInternal) public struct CountryCodeValidator : Adyen.Validator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) public func maximumLength(for value: Swift.String) -> Swift.Int
}
@_spi(AdyenInternal) public struct CurrencyCodeValidator : Adyen.Validator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) public func maximumLength(for value: Swift.String) -> Swift.Int
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class DateValidator : Adyen.Validator {
  @_spi(AdyenInternal) public init(format: Adyen.DateValidator.Format)
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) final public func maximumLength(for _: Swift.String) -> Swift.Int
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.DateValidator {
  @_spi(AdyenInternal) public enum Format : Swift.String {
    @_spi(AdyenInternal) case kcpFormat
    @_spi(AdyenInternal) public init?(rawValue: Swift.String)
    @_spi(AdyenInternal) public typealias RawValue = Swift.String
    @_spi(AdyenInternal) public var rawValue: Swift.String {
      @_spi(AdyenInternal) get
    }
  }
}
@_spi(AdyenInternal) public struct AddressViewModelBuilderContext {
  @_spi(AdyenInternal) public var countryCode: Swift.String
  @_spi(AdyenInternal) public var isOptional: Swift.Bool
}
@_spi(AdyenInternal) public protocol AddressViewModelBuilder {
  @_spi(AdyenInternal) func build(context: Adyen.AddressViewModelBuilderContext) -> Adyen.AddressViewModel
}
@_spi(AdyenInternal) public struct DefaultAddressViewModelBuilder : Adyen.AddressViewModelBuilder {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) public func build(context: Adyen.AddressViewModelBuilderContext) -> Adyen.AddressViewModel
}
public struct DelegatedAuthenticationComponentStyle {
  public var backgroundColor: UIKit.UIColor
  public var imageStyle: Adyen.ImageStyle
  public var headerTextStyle: Adyen.TextStyle
  public var descriptionTextStyle: Adyen.TextStyle
  public var amountTextStyle: Adyen.TextStyle
  public var cardImageStyle: Adyen.ImageStyle
  public var cardNumberTextStyle: Adyen.TextStyle
  public var infoImageStyle: Adyen.ImageStyle
  public var additionalInformationTextStyle: Adyen.TextStyle
  public var errorBackgroundColor: UIKit.UIColor
  public var errorImageStyle: Adyen.ImageStyle
  public var errorTitleStyle: Adyen.TextStyle
  public var errorDescription: Adyen.TextStyle
  public var primaryButton: Adyen.ButtonStyle
  public var secondaryButton: Adyen.ButtonStyle
  public var errorButton: Adyen.ButtonStyle
  public init()
}
@_spi(AdyenInternal) public protocol DelegatedAuthenticationAware {
  @_spi(AdyenInternal) var delegatedAuthenticationData: Adyen.DelegatedAuthenticationData? { get }
}
public enum DelegatedAuthenticationData : Swift.Codable {
  public enum DecodingError : Foundation.LocalizedError {
    case invalidDelegatedAuthenticationData
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.DelegatedAuthenticationData.DecodingError, b: Adyen.DelegatedAuthenticationData.DecodingError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case sdkOutput(Swift.String)
  case sdkInput(Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol Details : Adyen.OpaqueEncodable {
}
public protocol PaymentMethodDetails : Adyen.Details {
  @_spi(AdyenInternal) var checkoutAttemptId: Swift.String? { get set }
}
extension Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String? {
    get
    set
  }
}
public protocol AdditionalDetails : Adyen.Details {
}
public protocol DeviceDependent {
  static func isDeviceSupported() -> Swift.Bool
}
@_spi(AdyenInternal) public enum Dimensions {
  @_spi(AdyenInternal) public static var leastPresentableScale: CoreFoundation.CGFloat
  @_spi(AdyenInternal) public static var greatestPresentableHeightScale: CoreFoundation.CGFloat
  @_spi(AdyenInternal) public static var maxAdaptiveWidth: CoreFoundation.CGFloat
  @_spi(AdyenInternal) public static var greatestPresentableScale: CoreFoundation.CGFloat {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public static func expectedWidth(for window: UIKit.UIWindow? = nil) -> CoreFoundation.CGFloat
  @_spi(AdyenInternal) public static func keyWindowSize(for window: UIKit.UIWindow? = nil) -> CoreFoundation.CGRect
}
public struct DisplayInformation : Swift.Equatable {
  @_spi(AdyenInternal) public enum TrailingInfoType : Swift.Equatable {
    @_spi(AdyenInternal) case text(Swift.String)
    @_spi(AdyenInternal) case logos(named: [Swift.String], trailingText: Swift.String?)
    @_spi(AdyenInternal) public static func == (a: Adyen.DisplayInformation.TrailingInfoType, b: Adyen.DisplayInformation.TrailingInfoType) -> Swift.Bool
  }
  public let title: Swift.String
  public let subtitle: Swift.String?
  @_spi(AdyenInternal) public let logoName: Swift.String
  @_spi(AdyenInternal) public let trailingInfo: Adyen.DisplayInformation.TrailingInfoType?
  @_spi(AdyenInternal) public let footnoteText: Swift.String?
  @_spi(AdyenInternal) public let accessibilityLabel: Swift.String?
  public init(title: Swift.String, subtitle: Swift.String?, logoName: Swift.String, disclosureText: Swift.String? = nil, footnoteText: Swift.String? = nil, accessibilityLabel: Swift.String? = nil)
  @_spi(AdyenInternal) public init(title: Swift.String, subtitle: Swift.String?, logoName: Swift.String, trailingInfo: Adyen.DisplayInformation.TrailingInfoType?, footnoteText: Swift.String? = nil, accessibilityLabel: Swift.String? = nil)
  public static func == (a: Adyen.DisplayInformation, b: Adyen.DisplayInformation) -> Swift.Bool
}
public struct MerchantCustomDisplayInformation {
  public let title: Swift.String
  public let subtitle: Swift.String?
  public init(title: Swift.String, subtitle: Swift.String? = nil)
}
public enum DocumentPaymentMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case bacs
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Adyen.DocumentPaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [Adyen.DocumentPaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct DocumentAction : Swift.Decodable {
  public let downloadUrl: Foundation.URL
  public let paymentMethodType: Adyen.DocumentPaymentMethod
  public init(from decoder: any Swift.Decoder) throws
}
final public class DocumentComponent : Adyen.ActionComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  public struct Configuration {
    public var style: Adyen.DocumentComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(style: Adyen.DocumentComponentStyle = DocumentComponentStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
  }
  final public var configuration: Adyen.DocumentComponent.Configuration
  public init(context: Adyen.AdyenContext, configuration: Adyen.DocumentComponent.Configuration = .init())
  final public func handle(_ action: Adyen.DocumentAction)
  @objc deinit
}
public struct DocumentComponentStyle {
  public var image: Adyen.ImageStyle
  public var doneButton: Adyen.ButtonStyle
  public var mainButton: Adyen.ButtonStyle
  public var messageLabel: Adyen.TextStyle
  public var backgroundColor: UIKit.UIColor
  public init()
}
final public class DokuComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: Adyen.DokuPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.DokuComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @objc deinit
}
public struct DokuDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let emailAddress: Swift.String
  public init(paymentMethod: any Adyen.PaymentMethod, firstName: Swift.String, lastName: Swift.String, emailAddress: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DokuPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias DokuWalletPaymentMethod = Adyen.DokuPaymentMethod
public typealias AlfamartPaymentMethod = Adyen.DokuPaymentMethod
public typealias IndomaretPaymentMethod = Adyen.DokuPaymentMethod
@_hasMissingDesignatedInitializers final public class DokuVoucherAction : Adyen.GenericVoucherAction {
  final public let shopperName: Swift.String
  final public let shopperEmail: Swift.String
  final public let instructionsURL: Foundation.URL
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class DropInComponent : ObjectiveC.NSObject, Adyen.AnyDropInComponent, Adyen.ActionHandlingComponent, Adyen.LoadingComponent {
  final public var paymentMethods: Adyen.PaymentMethods {
    get
  }
  final public let title: Swift.String
  @_spi(AdyenInternal) final public var context: Adyen.AdyenContext
  public init(paymentMethods: Adyen.PaymentMethods, context: Adyen.AdyenContext, configuration: Adyen.DropInComponent.Configuration = .init(), title: Swift.String? = nil)
  weak final public var delegate: (any Adyen.DropInComponentDelegate)?
  weak final public var partialPaymentDelegate: (any Adyen.PartialPaymentDelegate)?
  weak final public var storedPaymentMethodsDelegate: (any Adyen.StoredPaymentMethodsDelegate)? {
    get
    set
  }
  weak final public var cardComponentDelegate: (any Adyen.CardComponentDelegate)?
  final public var viewController: UIKit.UIViewController {
    get
  }
  final public func handle(_ action: Adyen.Action)
  final public func reload(with order: Adyen.PartialPaymentOrder, _ paymentMethods: Adyen.PaymentMethods) throws
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.AdyenSessionAware {
  @_spi(AdyenInternal) final public var isSession: Swift.Bool {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.StorePaymentMethodFieldAware {
  @_spi(AdyenInternal) final public var showStorePaymentMethodField: Swift.Bool? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.InstallmentConfigurationAware {
  @_spi(AdyenInternal) final public var installmentConfiguration: Adyen.InstallmentConfiguration? {
    @_spi(AdyenInternal) get
  }
}
public protocol DropInComponentDelegate : AnyObject {
  func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didComplete(from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didOpenExternalApplication(component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
  func didFail(with error: any Swift.Error, from dropInComponent: any Adyen.AnyDropInComponent)
  func didCancel(component: any Adyen.PaymentComponent, from dropInComponent: any Adyen.AnyDropInComponent)
}
extension Adyen.DropInComponentDelegate {
  public func didCancel(component: any Adyen.PaymentComponent, from dropInComponent: any Adyen.AnyDropInComponent)
  public func didOpenExternalApplication(component: any Adyen.ActionComponent, in dropInComponent: any Adyen.AnyDropInComponent)
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.PaymentComponentDelegate {
  @_spi(AdyenInternal) final public func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent)
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.ActionComponentDelegate {
  @_spi(AdyenInternal) final public func didOpenExternalApplication(component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didComplete(from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
}
extension Adyen.DropInComponent {
  @_spi(AdyenInternal) final public func present(component: any Adyen.PresentableComponent)
}
extension Adyen.DropInComponent : Adyen.FinalizableComponent {
  final public func didFinalize(with success: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension Adyen.DropInComponent : Adyen.ReadyToSubmitPaymentComponentDelegate {
  @_spi(AdyenInternal) final public func showConfirmation(for component: Adyen.InstantPaymentComponent, with order: Adyen.PartialPaymentOrder?)
}
@_spi(AdyenInternal) extension Adyen.DropInComponent : Adyen.TrackableComponent {
  @_spi(AdyenInternal) final public var analyticsFlavor: Adyen.AnalyticsFlavor {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public func sendDidLoadEvent()
}
extension Adyen.DropInComponent {
  public struct Style {
    public var navigation: Adyen.NavigationStyle
    public var listComponent: Adyen.ListComponentStyle
    public var formComponent: Adyen.FormComponentStyle
    public var actionComponent: Adyen.ActionComponentStyle
    public var applePay: Adyen.ApplePayStyle
    public var separatorColor: UIKit.UIColor? {
      get
      set
    }
    public init()
    public init(tintColor: UIKit.UIColor)
  }
}
extension Adyen.DropInComponent {
  final public class Configuration : Adyen.AnyPersonalInformationConfiguration {
    final public var card: Adyen.DropInComponent.Card
    final public var applePay: Adyen.ApplePayComponent.Configuration?
    final public var paymentMethodsList: Adyen.PaymentMethodListConfiguration
    final public var actionComponent: Adyen.DropInComponent.ActionComponentConfiguration
    final public var shopperInformation: Adyen.PrefilledShopperInformation?
    final public var localizationParameters: Adyen.LocalizationParameters?
    final public var allowsSkippingPaymentList: Swift.Bool
    final public var allowPreselectedPaymentView: Swift.Bool
    final public var style: Adyen.DropInComponent.Style
    final public var boleto: Adyen.DropInComponent.Boleto
    final public var cashAppPay: Adyen.DropInComponent.CashAppPay?
    final public var ach: Adyen.DropInComponent.ACH
    final public var giftCard: Adyen.DropInComponent.GiftCard
    public init(style: Adyen.DropInComponent.Style = Style(), allowsSkippingPaymentList: Swift.Bool = false, allowPreselectedPaymentView: Swift.Bool = true)
    @objc deinit
  }
  public struct ActionComponentConfiguration {
    public init()
    public var threeDS: Adyen.AdyenActionComponent.Configuration.ThreeDS
    public var twint: Adyen.AdyenActionComponent.Configuration.Twint?
  }
  public struct Boleto {
    public var showEmailAddress: Swift.Bool
  }
  public struct ACH : Adyen.AnyACHDirectDebitConfiguration {
    public var showsStorePaymentMethodField: Swift.Bool
    public var showsBillingAddress: Swift.Bool
    public var billingAddressCountryCodes: [Swift.String]
    public init(showsStorePaymentMethodField: Swift.Bool = true, showsBillingAddress: Swift.Bool = true, billingAddressCountryCodes: [Swift.String] = ["US", "PR"])
  }
  public struct GiftCard {
    public var showsSecurityCodeField: Swift.Bool
  }
  public struct Card : Adyen.AnyCardComponentConfiguration {
    public var showsHolderNameField: Swift.Bool
    public var showsStorePaymentMethodField: Swift.Bool
    public var showsSecurityCodeField: Swift.Bool
    public var showsSubmitButton: Swift.Bool
    public var koreanAuthenticationMode: Adyen.CardComponent.FieldVisibility
    public var socialSecurityNumberMode: Adyen.CardComponent.FieldVisibility
    public var stored: Adyen.StoredCardConfiguration
    public var allowedCardTypes: [Adyen.CardType]?
    public var installmentConfiguration: Adyen.InstallmentConfiguration?
    public var billingAddress: Adyen.BillingAddressConfiguration
    public init(showsHolderNameField: Swift.Bool = false, showsStorePaymentMethodField: Swift.Bool = true, showsSecurityCodeField: Swift.Bool = true, showsSubmitButton: Swift.Bool = true, koreanAuthenticationMode: Adyen.CardComponent.FieldVisibility = .auto, socialSecurityNumberMode: Adyen.CardComponent.FieldVisibility = .auto, storedCardConfiguration: Adyen.StoredCardConfiguration = StoredCardConfiguration(), allowedCardTypes: [Adyen.CardType]? = nil, installmentConfiguration: Adyen.InstallmentConfiguration? = nil, billingAddress: Adyen.BillingAddressConfiguration = .init())
  }
  public struct CashAppPay : Adyen.AnyCashAppPayConfiguration {
    public let redirectURL: Foundation.URL
    public let referenceId: Swift.String?
    public var showsStorePaymentMethodField: Swift.Bool
    public var storePaymentMethod: Swift.Bool
    public init(redirectURL: Foundation.URL, referenceId: Swift.String? = nil, showsStorePaymentMethodField: Swift.Bool = true, storePaymentMethod: Swift.Bool = false)
  }
}
@_inheritsConvenienceInitializers public class EContextATMVoucherAction : Adyen.EContextStoresVoucherAction {
  final public let collectionInstitutionNumber: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct EContextPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias SevenElevenPaymentMethod = Adyen.EContextPaymentMethod
@_hasMissingDesignatedInitializers public class EContextStoresVoucherAction : Adyen.GenericVoucherAction {
  final public let maskedTelephoneNumber: Swift.String
  final public let instructionsURL: Foundation.URL
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(AdyenInternal) public class EmailValidator : Adyen.RegularExpressionValidator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) @objc deinit
}
public struct EmptyStateViewStyle : Adyen.ViewStyle {
  public var title: Adyen.TextStyle
  public var subtitle: Adyen.TextStyle
  public var backgroundColor: UIKit.UIColor
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EmptyStateView<SubtitleLabel> : UIKit.UIView, Adyen.SearchResultsEmptyView where SubtitleLabel : UIKit.UIView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var searchTerm: Swift.String
  @_spi(AdyenInternal) @objc deinit
}
public struct EncryptedCard {
  public let number: Swift.String?
  public let securityCode: Swift.String?
  public let expiryMonth: Swift.String?
  public let expiryYear: Swift.String?
}
public struct Environment : AdyenNetworking.AnyAPIEnvironment {
  public var baseURL: Foundation.URL
  public static let test: Adyen.Environment
  @_spi(AdyenInternal) public static let beta: Adyen.Environment
  @_spi(AdyenInternal) public static let local: Adyen.Environment
  @available(*, deprecated, message: "Please explicitly select the environment matching your region.")
  public static let live: Adyen.Environment
  public static let liveEurope: Adyen.Environment
  public static let liveAustralia: Adyen.Environment
  public static let liveUnitedStates: Adyen.Environment
  public static let liveApse: Adyen.Environment
  public static let liveIndia: Adyen.Environment
  @_spi(AdyenInternal) public var isLive: Swift.Bool {
    get
  }
  public init(baseURL: Foundation.URL)
}
@_spi(AdyenInternal) extension Adyen.Environment : Swift.Equatable {
  @_spi(AdyenInternal) public static func == (a: Adyen.Environment, b: Adyen.Environment) -> Swift.Bool
}
public protocol EventPublisher : AnyObject {
  associatedtype Event
  var eventHandlers: [Adyen.EventHandlerToken : Adyen.EventHandler<Self.Event>] { get set }
}
@_spi(AdyenInternal) extension Adyen.EventPublisher {
  @_spi(AdyenInternal) public func addEventHandler(_ eventHandler: @escaping Adyen.EventHandler<Self.Event>) -> Adyen.EventHandlerToken
  @_spi(AdyenInternal) public func removeEventHandler(with token: Adyen.EventHandlerToken)
  @_spi(AdyenInternal) public func publish(_ event: Self.Event)
}
public typealias EventHandler<Event> = (Event) -> Swift.Void
public struct EventHandlerToken : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Adyen.EventHandlerToken, b: Adyen.EventHandlerToken) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class FormAddressItem : Adyen.FormValueItem<Adyen.PostalAddress, Adyen.AddressStyle>, Adyen.AdyenObserver {
  @_spi(AdyenInternal) override final public var value: Adyen.PostalAddress {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) override final public var subitems: [any Adyen.FormItem] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public var addressViewModel: Adyen.AddressViewModel {
    get
  }
  @_spi(AdyenInternal) override final public var title: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) public init(initialCountry: Swift.String, configuration: Adyen.FormAddressItem.Configuration, identifier: Swift.String? = nil, presenter: (any Adyen.ViewControllerPresenter)?, addressViewModelBuilder: any Adyen.AddressViewModelBuilder)
  @_spi(AdyenInternal) final public func updateOptionalStatus(isOptional: Swift.Bool)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) final public func reset()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormAddressItem {
  @_spi(AdyenInternal) public struct Configuration {
    @_spi(AdyenInternal) public init(style: Adyen.AddressStyle = AddressStyle(), localizationParameters: Adyen.LocalizationParameters? = nil, supportedCountryCodes: [Swift.String]? = nil, showsHeader: Swift.Bool = true)
  }
}
@_spi(AdyenInternal) final public class FormAddressPickerItem : Adyen.FormSelectableValueItem<Adyen.PostalAddress?> {
  @_spi(AdyenInternal) public enum AddressType {
    @_spi(AdyenInternal) case billing
    @_spi(AdyenInternal) case delivery
    @_spi(AdyenInternal) public static func == (a: Adyen.FormAddressPickerItem.AddressType, b: Adyen.FormAddressPickerItem.AddressType) -> Swift.Bool
    @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(AdyenInternal) public var hashValue: Swift.Int {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) final public var addressViewModel: Adyen.AddressViewModel {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) override final public var value: Adyen.PostalAddress? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) public init(for addressType: Adyen.FormAddressPickerItem.AddressType, initialCountry: Swift.String, supportedCountryCodes: [Swift.String]?, prefillAddress: Adyen.PostalAddress?, style: Adyen.FormComponentStyle, localizationParameters: Adyen.LocalizationParameters? = nil, identifier: Swift.String? = nil, addressViewModelBuilder: any Adyen.AddressViewModelBuilder = DefaultAddressViewModelBuilder(), presenter: any Adyen.ViewControllerPresenter, lookupProvider: (any Adyen.AddressLookupProvider)? = nil)
  @_spi(AdyenInternal) final public func updateOptionalStatus(isOptional: Swift.Bool)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) override final public func isValid() -> Swift.Bool
  @_spi(AdyenInternal) override final public func validationStatus() -> Adyen.ValidationStatus?
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormAddressPickerItem.AddressType {
  @_spi(AdyenInternal) public func placeholder(with localizationParameters: Adyen.LocalizationParameters?) -> Swift.String
  @_spi(AdyenInternal) public func title(with localizationParameters: Adyen.LocalizationParameters?) -> Swift.String
}
public protocol Formatter : Adyen.Sanitizer {
  func formattedValue(for value: Swift.String) -> Swift.String
}
public protocol Sanitizer {
  func sanitizedValue(for value: Swift.String) -> Swift.String
}
@_spi(AdyenInternal) public class FormAttributedLabelItem : Adyen.FormItem {
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) public init(originalText: Swift.String, links: [Swift.String], style: Adyen.TextStyle, linkTextStyle: Adyen.TextStyle, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormButtonItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public let style: Adyen.FormButtonItemStyle
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($title) final public var title: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $title: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($showsActivityIndicator) final public var showsActivityIndicator: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $showsActivityIndicator: Adyen.AdyenObservable<Swift.Bool> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($enabled) final public var enabled: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $enabled: Adyen.AdyenObservable<Swift.Bool> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public var buttonSelectionHandler: (() -> Swift.Void)?
  @_spi(AdyenInternal) public init(style: Adyen.FormButtonItemStyle)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
public struct FormButtonItemStyle : Adyen.ViewStyle {
  public var button: Adyen.ButtonStyle
  public var backgroundColor: UIKit.UIColor
  public init(button: Adyen.ButtonStyle)
  public init(button: Adyen.ButtonStyle, background: UIKit.UIColor)
  public static func main(font: UIKit.UIFont, textColor: UIKit.UIColor, mainColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat) -> Adyen.FormButtonItemStyle
  public static func main(font: UIKit.UIFont, textColor: UIKit.UIColor, mainColor: UIKit.UIColor) -> Adyen.FormButtonItemStyle
  public static func main(font: UIKit.UIFont, textColor: UIKit.UIColor, mainColor: UIKit.UIColor, cornerRounding: Adyen.CornerRounding) -> Adyen.FormButtonItemStyle
  public static func secondary(font: UIKit.UIFont, textColor: UIKit.UIColor) -> Adyen.FormButtonItemStyle
}
@_spi(AdyenInternal) final public class FormCardExpiryDateItem : Adyen.FormTextItem {
  @_spi(AdyenInternal) final public var expiryMonth: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public var expiryYear: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(style: Adyen.FormTextItemStyle = FormTextItemStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class FormCardNumberContainerItem : Adyen.FormItem, Adyen.AdyenObserver {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem] {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) final public var numberItem: Adyen.FormCardNumberItem {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class FormCardNumberItem : Adyen.FormTextItem, Adyen.AdyenObserver {
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class FormCardSecurityCodeItem : Adyen.FormTextItem {
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
public struct FormComponentStyle : Adyen.TintableStyle {
  public var backgroundColor: UIKit.UIColor
  public var sectionHeader: Adyen.TextStyle {
    get
    set
  }
  public var textField: Adyen.FormTextItemStyle {
    get
    set
  }
  public var toggle: Adyen.FormToggleItemStyle
  public var hintLabel: Adyen.TextStyle
  public var footnoteLabel: Adyen.TextStyle
  public var linkTextLabel: Adyen.TextStyle
  public var mainButtonItem: Adyen.FormButtonItemStyle
  public var secondaryButtonItem: Adyen.FormButtonItemStyle
  public var segmentedControlStyle: Adyen.SegmentedControlStyle
  public var addressStyle: Adyen.AddressStyle
  public var errorStyle: Adyen.FormErrorItemStyle
  public var tintColor: UIKit.UIColor? {
    get
    set
  }
  public var separatorColor: UIKit.UIColor? {
    get
    set
  }
  public init(textField: Adyen.FormTextItemStyle, toggle: Adyen.FormToggleItemStyle, mainButton: Adyen.FormButtonItemStyle, secondaryButton: Adyen.FormButtonItemStyle, helper: Adyen.TextStyle, sectionHeader: Adyen.TextStyle)
  public init(textField: Adyen.FormTextItemStyle, toggle: Adyen.FormToggleItemStyle, mainButton: Adyen.ButtonStyle, secondaryButton: Adyen.ButtonStyle)
  public init(tintColor: UIKit.UIColor)
  public init()
}
@_spi(AdyenInternal) public class FormContainerItem<ContentItem> : Adyen.FormItem where ContentItem : Adyen.FormItem {
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) final public let content: ContentItem
  @_spi(AdyenInternal) public init(content: ContentItem, padding: UIKit.UIEdgeInsets? = nil, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormItem {
  @_spi(AdyenInternal) public func padding(_ padding: UIKit.UIEdgeInsets? = nil) -> Adyen.FormContainerItem<Self>
}
@_spi(AdyenInternal) final public class FormErrorItem : Adyen.FormItem {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($message) final public var message: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $message: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public let iconName: Swift.String
  @_spi(AdyenInternal) final public let style: Adyen.FormErrorItemStyle
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) public init(message: Swift.String? = nil, iconName: Swift.String = "error", style: Adyen.FormErrorItemStyle = FormErrorItemStyle())
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
public struct FormErrorItemStyle : Adyen.ViewStyle {
  public var message: Adyen.TextStyle
  public var cornerRounding: Adyen.CornerRounding
  public var backgroundColor: UIKit.UIColor
  public init(message: Adyen.TextStyle)
  public init()
}
@_spi(AdyenInternal) public class FormImageItem : Adyen.FormItem {
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) public var name: Swift.String
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) public var size: CoreFoundation.CGSize
  @_spi(AdyenInternal) public var style: Adyen.ImageStyle?
  @_spi(AdyenInternal) public init(name: Swift.String, size: CoreFoundation.CGSize? = nil, style: Adyen.ImageStyle? = nil, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public typealias IssuerPickerItem = Adyen.BasePickerElement<Adyen.Issuer>
@_spi(AdyenInternal) @_inheritsConvenienceInitializers final public class FormIssuersPickerItem : Adyen.BaseFormPickerItem<Adyen.Issuer> {
  @_spi(AdyenInternal) override public init(preselectedValue: Adyen.IssuerPickerItem, selectableValues: [Adyen.IssuerPickerItem], style: Adyen.FormTextItemStyle)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol FormItem : AnyObject {
  @_spi(AdyenInternal) var isHidden: Adyen.AdyenObservable<Swift.Bool> { get }
  @_spi(AdyenInternal) var identifier: Swift.String? { get set }
  @_spi(AdyenInternal) var subitems: [any Adyen.FormItem] { get }
  @_spi(AdyenInternal) func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
}
@_spi(AdyenInternal) extension Adyen.FormItem {
  @_spi(AdyenInternal) public var flatSubitems: [any Adyen.FormItem] {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public protocol ValidatableFormItem : Adyen.FormItem {
  @_spi(AdyenInternal) var validationFailureMessage: Swift.String? { get set }
  @_spi(AdyenInternal) func isValid() -> Swift.Bool
}
@_spi(AdyenInternal) public protocol InputViewRequiringFormItem : Adyen.FormItem {
}
@_spi(AdyenInternal) extension Adyen.FormItem {
  @_spi(AdyenInternal) public var isVisible: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
}
@_spi(AdyenInternal) public protocol FormItemInjector {
  @_spi(AdyenInternal) func inject(into formViewController: Adyen.FormViewController)
}
@_spi(AdyenInternal) public struct CustomFormItemInjector<T> : Adyen.FormItemInjector where T : Adyen.FormItem {
  @_spi(AdyenInternal) public init(item: T)
  @_spi(AdyenInternal) public func inject(into formViewController: Adyen.FormViewController)
}
@_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open class FormItemView<ItemType> : UIKit.UIView, Adyen.AnyFormItemView, Adyen.AdyenObserver where ItemType : Adyen.FormItem {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public let item: ItemType
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: ItemType)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open var childItemViews: [any Adyen.AnyFormItemView] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func reset()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol AnyFormItemView : UIKit.UIView {
  @_spi(AdyenInternal) var parentItemView: (any Adyen.AnyFormItemView)? { get }
  @_spi(AdyenInternal) var childItemViews: [any Adyen.AnyFormItemView] { get }
  @_spi(AdyenInternal) func reset()
}
@_spi(AdyenInternal) extension Adyen.AnyFormItemView {
  @_spi(AdyenInternal) public var parentItemView: (any Adyen.AnyFormItemView)? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var flatSubitemViews: [any Adyen.AnyFormItemView] {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct FormItemViewBuilder {
  @_spi(AdyenInternal) public func build(with item: Adyen.FormToggleItem) -> Adyen.FormItemView<Adyen.FormToggleItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormSplitItem) -> Adyen.FormItemView<Adyen.FormSplitItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormPhoneNumberItem) -> Adyen.FormItemView<Adyen.FormPhoneNumberItem>
  @_spi(AdyenInternal) public func build<Value>(with item: Adyen.BaseFormPickerItem<Value>) -> Adyen.BaseFormPickerItemView<Value> where Value : Swift.CustomStringConvertible, Value : Swift.Equatable
  @_spi(AdyenInternal) public func build(with item: Adyen.FormTextInputItem) -> Adyen.FormItemView<Adyen.FormTextInputItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.ListItem) -> Adyen.ListItemView
  @_spi(AdyenInternal) public func build(with item: Adyen.SelectableFormItem) -> Adyen.FormItemView<Adyen.SelectableFormItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormButtonItem) -> Adyen.FormItemView<Adyen.FormButtonItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormImageItem) -> Adyen.FormItemView<Adyen.FormImageItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormSeparatorItem) -> Adyen.FormItemView<Adyen.FormSeparatorItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormErrorItem) -> Adyen.FormItemView<Adyen.FormErrorItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormAddressItem) -> Adyen.FormItemView<Adyen.FormAddressItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormSpacerItem) -> Adyen.FormItemView<Adyen.FormSpacerItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormPostalCodeItem) -> Adyen.FormItemView<Adyen.FormPostalCodeItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormSearchButtonItem) -> Adyen.FormItemView<Adyen.FormSearchButtonItem>
  @_spi(AdyenInternal) public func build(with item: Adyen.FormAddressPickerItem) -> Adyen.FormItemView<Adyen.FormAddressPickerItem>
  @_spi(AdyenInternal) public func build<Value>(with item: Adyen.FormPickerItem<Value>) -> Adyen.FormItemView<Adyen.FormPickerItem<Value>> where Value : Adyen.FormPickable
  @_spi(AdyenInternal) public func build(with item: Adyen.FormPhoneExtensionPickerItem) -> Adyen.FormPhoneExtensionPickerItemView
  @_spi(AdyenInternal) public static func build(_ item: any Adyen.FormItem) -> any Adyen.AnyFormItemView
}
@_spi(AdyenInternal) public class FormLabelItem : Adyen.FormItem {
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) public init(text: Swift.String, style: Adyen.TextStyle, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) public var style: Adyen.TextStyle
  @_spi(AdyenInternal) public var text: Swift.String
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.PhoneExtension : Adyen.FormPickable {
  @_spi(AdyenInternal) public var identifier: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var icon: UIKit.UIImage? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var title: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var subtitle: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var trailingText: Swift.String? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) final public class FormPhoneExtensionPickerItem : Adyen.FormPickerItem<Adyen.PhoneExtension> {
  @_spi(AdyenInternal) required public init(preselectedExtension: Adyen.PhoneExtension?, selectableExtensions: [Adyen.PhoneExtension], validationFailureMessage: Swift.String?, style: Adyen.FormTextItemStyle, presenter: Adyen.WeakReferenceViewControllerPresenter, localizationParameters: Adyen.LocalizationParameters? = nil, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) override final public func resetValue()
  @_spi(AdyenInternal) override final public func updateValidationFailureMessage()
  @_spi(AdyenInternal) override final public func updateFormattedValue()
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FormPhoneExtensionPickerItemView : Adyen.FormItemView<Adyen.FormPhoneExtensionPickerItem> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: Adyen.FormPhoneExtensionPickerItem)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormPhoneNumberItem : Adyen.FormTextItem {
  @_spi(AdyenInternal) final public var prefix: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public var phoneNumber: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(phoneNumber: Adyen.PhoneNumber?, selectableValues: [Adyen.PhoneExtension], style: Adyen.FormTextItemStyle, localizationParameters: Adyen.LocalizationParameters? = nil, presenter: Adyen.WeakReferenceViewControllerPresenter)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol FormPickable : Swift.Equatable {
  @_spi(AdyenInternal) var identifier: Swift.String { get }
  @_spi(AdyenInternal) var icon: UIKit.UIImage? { get }
  @_spi(AdyenInternal) var title: Swift.String { get }
  @_spi(AdyenInternal) var subtitle: Swift.String? { get }
  @_spi(AdyenInternal) var trailingText: Swift.String? { get }
}
@_spi(AdyenInternal) public struct FormPickerElement : Adyen.FormPickable {
  @_spi(AdyenInternal) public let identifier: Swift.String
  @_spi(AdyenInternal) public let icon: UIKit.UIImage?
  @_spi(AdyenInternal) public let title: Swift.String
  @_spi(AdyenInternal) public let subtitle: Swift.String?
  @_spi(AdyenInternal) public let trailingText: Swift.String?
  @_spi(AdyenInternal) public init(identifier: Swift.String, icon: UIKit.UIImage? = nil, title: Swift.String, subtitle: Swift.String? = nil, trailingText: Swift.String? = nil)
  @_spi(AdyenInternal) public static func == (a: Adyen.FormPickerElement, b: Adyen.FormPickerElement) -> Swift.Bool
}
@_spi(AdyenInternal) open class FormPickerItem<Value> : Adyen.FormSelectableValueItem<Value?> where Value : Adyen.FormPickable {
  @_spi(AdyenInternal) final public let localizationParameters: Adyen.LocalizationParameters?
  @_spi(AdyenInternal) public var isOptional: Swift.Bool {
    get
  }
  @_spi(AdyenInternal) override public var value: Value? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($selectableValues) public var selectableValues: [Value] {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $selectableValues: Adyen.AdyenObservable<[Value]> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(preselectedValue: Value?, selectableValues: [Value], title: Swift.String, placeholder: Swift.String, style: Adyen.FormTextItemStyle, presenter: (any Adyen.ViewControllerPresenter)?, localizationParameters: Adyen.LocalizationParameters? = nil, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) public func updateOptionalStatus(isOptional: Swift.Bool)
  @_spi(AdyenInternal) public func resetValue()
  @_spi(AdyenInternal) override public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) override public func isValid() -> Swift.Bool
  @_spi(AdyenInternal) override public func validationStatus() -> Adyen.ValidationStatus?
  @_spi(AdyenInternal) public func updateValidationFailureMessage()
  @_spi(AdyenInternal) public func updateFormattedValue()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FormPickerItemView<Value> : Adyen.FormSelectableValueItemView<Value, Adyen.FormPickerItem<Value>> where Value : Adyen.FormPickable {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public func showValidation()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public func reset()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public class FormPickerSearchViewController<Option> : UIKit.UINavigationController where Option : Adyen.FormPickable {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(localizationParameters: Adyen.LocalizationParameters? = nil, style: Adyen.FormPickerSearchViewController<Option>.Style = .init(), title: Swift.String?, options: [Option], selectionHandler: @escaping (Option) -> Swift.Void)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormPickerSearchViewController {
  @_spi(AdyenInternal) @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EmptyView : Adyen.EmptyStateView<UIKit.UILabel> {
    @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public var searchTerm: Swift.String {
      @_spi(AdyenInternal) get
      @_spi(AdyenInternal) set
    }
    @_spi(AdyenInternal) @objc deinit
  }
}
@_spi(AdyenInternal) extension Adyen.FormPickerSearchViewController.EmptyView {
  @_spi(AdyenInternal) public struct Style : Adyen.ViewStyle {
    @_spi(AdyenInternal) public var title: Adyen.TextStyle
    @_spi(AdyenInternal) public var subtitle: Adyen.TextStyle
    @_spi(AdyenInternal) public var backgroundColor: UIKit.UIColor
    @_spi(AdyenInternal) public init()
  }
}
@_spi(AdyenInternal) extension Adyen.FormPickerSearchViewController {
  @_spi(AdyenInternal) public struct Style : Adyen.ViewStyle {
    @_spi(AdyenInternal) public var backgroundColor: UIKit.UIColor
    @_spi(AdyenInternal) public var emptyView: Adyen.FormPickerSearchViewController<Option>.EmptyView.Style
    @_spi(AdyenInternal) public init()
  }
}
@_spi(AdyenInternal) final public class FormPostalCodeItem : Adyen.FormTextItem {
  @_spi(AdyenInternal) public init(style: Adyen.FormTextItemStyle = FormTextItemStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
  @_spi(AdyenInternal) final public func updateOptionalStatus(isOptional: Swift.Bool)
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormRegionPickerItem : Adyen.FormPickerItem<Adyen.FormPickerElement> {
  @_spi(AdyenInternal) required public init(preselectedRegion: Adyen.Region?, selectableRegions: [Adyen.Region], validationFailureMessage: Swift.String?, title: Swift.String, placeholder: Swift.String, style: Adyen.FormTextItemStyle, presenter: (any Adyen.ViewControllerPresenter)?, localizationParameters: Adyen.LocalizationParameters? = nil, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) final public func updateValue(with region: Adyen.Region?)
  @_spi(AdyenInternal) override final public func resetValue()
  @_spi(AdyenInternal) override final public func updateValidationFailureMessage()
  @_spi(AdyenInternal) override final public func updateFormattedValue()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormSearchButtonItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public let style: any Adyen.ViewStyle
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($placeholder) final public var placeholder: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $placeholder: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public let selectionHandler: () -> Swift.Void
  @_spi(AdyenInternal) public init(placeholder: Swift.String, style: any Adyen.ViewStyle, identifier: Swift.String, selectionHandler: @escaping () -> Swift.Void)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormSegmentedControlItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) final public var style: Adyen.SegmentedControlStyle
  @_spi(AdyenInternal) final public var selectionHandler: ((_ selectedIndex: Swift.Int) -> Swift.Void)?
  @_spi(AdyenInternal) public init(items: [Swift.String], style: Adyen.SegmentedControlStyle, identifier: Swift.String? = nil)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers open class FormSelectableValueItem<ValueType> : Adyen.FormValidatableValueItem<ValueType> where ValueType : Swift.Equatable {
  @_spi(AdyenInternal) final public let placeholder: Swift.String
  @_spi(AdyenInternal) public var selectionHandler: () -> Swift.Void
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($formattedValue) public var formattedValue: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $formattedValue: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(value: ValueType, style: Adyen.FormTextItemStyle, placeholder: Swift.String)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FormSelectableValueItemView<ValueType, ItemType> : Adyen.FormValidatableValueItemView<ValueType?, ItemType> where ValueType : Swift.Equatable, ItemType : Adyen.FormSelectableValueItem<ValueType?> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: ItemType)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormSeparatorItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public let color: UIKit.UIColor
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) public init(color: UIKit.UIColor)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormSpacerItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) final public let subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public let standardSpaceMultiplier: Swift.Int
  @_spi(AdyenInternal) public init(numberOfSpaces: Swift.Int = 1)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class FormSpacerItemView : Adyen.FormItemView<Adyen.FormSpacerItem> {
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class FormSplitItem : Adyen.FormItem {
  @_spi(AdyenInternal) final public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) final public let style: any Adyen.ViewStyle
  @_spi(AdyenInternal) final public var identifier: Swift.String?
  @_spi(AdyenInternal) final public var subitems: [any Adyen.FormItem] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(items: any Adyen.FormItem..., style: any Adyen.ViewStyle)
  @_spi(AdyenInternal) final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers final public class FormTextInputItem : Adyen.FormTextItem {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($isEnabled) final public var isEnabled: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) final public var $isEnabled: Adyen.AdyenObservable<Swift.Bool> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) override public init(style: Adyen.FormTextItemStyle = FormTextItemStyle())
  @_spi(AdyenInternal) override final public func isValid() -> Swift.Bool
  @_spi(AdyenInternal) final public func focus()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FormTextInputItemView : Adyen.FormTextItemView<Adyen.FormTextInputItem> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: Adyen.FormTextInputItem)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers open class FormTextItem : Adyen.FormValidatableValueItem<Swift.String>, Adyen.InputViewRequiringFormItem {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($placeholder) public var placeholder: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $placeholder: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) override public var value: Swift.String {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) public var formatter: (any Adyen.Formatter)?
  @_spi(AdyenInternal) public var validator: (any Adyen.Validator)?
  @_spi(AdyenInternal) public var autocapitalizationType: UIKit.UITextAutocapitalizationType
  @_spi(AdyenInternal) public var autocorrectionType: UIKit.UITextAutocorrectionType
  @_spi(AdyenInternal) public var keyboardType: UIKit.UIKeyboardType
  @_spi(AdyenInternal) public var contentType: UIKit.UITextContentType?
  @_spi(AdyenInternal) public var allowsValidationWhileEditing: Swift.Bool
  @_spi(AdyenInternal) public var onDidBeginEditing: (() -> Swift.Void)?
  @_spi(AdyenInternal) public var onDidEndEditing: (() -> Swift.Void)?
  @_spi(AdyenInternal) public init(style: Adyen.FormTextItemStyle)
  @_spi(AdyenInternal) override public func isValid() -> Swift.Bool
  @_spi(AdyenInternal) override public func validationStatus() -> Adyen.ValidationStatus?
  @_spi(AdyenInternal) @discardableResult
  public func textDidChange(value: Swift.String) -> Swift.String
  @_spi(AdyenInternal) @objc deinit
}
public struct FormTextItemStyle : Adyen.FormValueItemStyle {
  public var title: Adyen.TextStyle
  public var text: Adyen.TextStyle
  public var placeholderText: Adyen.TextStyle?
  public var icon: Adyen.ImageStyle
  public var tintColor: UIKit.UIColor? {
    get
    set
  }
  public var backgroundColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor?
  public init(title: Adyen.TextStyle, text: Adyen.TextStyle, placeholderText: Adyen.TextStyle? = nil, icon: Adyen.ImageStyle)
  public init(tintColor: UIKit.UIColor)
  public init()
}
@_spi(AdyenInternal) public protocol FormTextItemViewDelegate : AnyObject {
  @_spi(AdyenInternal) func didReachMaximumLength<T>(in itemView: Adyen.FormTextItemView<T>) where T : Adyen.FormTextItem
  @_spi(AdyenInternal) func didSelectReturnKey<T>(in itemView: Adyen.FormTextItemView<T>) where T : Adyen.FormTextItem
}
@_spi(AdyenInternal) public protocol AnyFormTextItemView : Adyen.AnyFormItemView {
  @_spi(AdyenInternal) var delegate: (any Adyen.FormTextItemViewDelegate)? { get set }
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FormTextItemView<ItemType> : Adyen.FormValidatableValueItemView<Swift.String, ItemType>, UIKit.UITextFieldDelegate, Adyen.AnyFormTextItemView where ItemType : Adyen.FormTextItem {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var accessibilityLabelView: UIKit.UIView? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: ItemType)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public func reset()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) weak public var delegate: (any Adyen.FormTextItemViewDelegate)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var textField: Adyen.TextField {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var accessory: Adyen.FormTextItemView<ItemType>.AccessoryType {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open func handleFormattedValueDidChange(_ newValue: Swift.String)
  @_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) open func textDidChange(textField: UIKit.UITextField)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public var isValid: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public func showValidation()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override open func configureSeparatorView()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open var lastBaselineAnchor: UIKit.NSLayoutYAxisAnchor {
    @_spi(AdyenInternal) @objc get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @_spi(AdyenInternal) @objc get
  }
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open var isFirstResponder: Swift.Bool {
    @_spi(AdyenInternal) @objc get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override open func updateValidationStatus(forced: Swift.Bool = false)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func notifyDelegateOfMaxLengthIfNeeded()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormTextItemView {
  @_spi(AdyenInternal) public enum AccessoryType : Swift.Equatable {
    @_spi(AdyenInternal) case invalid
    @_spi(AdyenInternal) case valid
    @_spi(AdyenInternal) case customView(UIKit.UIView)
    @_spi(AdyenInternal) case none
    @_spi(AdyenInternal) public static func == (a: Adyen.FormTextItemView<ItemType>.AccessoryType, b: Adyen.FormTextItemView<ItemType>.AccessoryType) -> Swift.Bool
  }
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class FormToggleItem : Adyen.FormValueItem<Swift.Bool, Adyen.FormToggleItemStyle> {
  @_spi(AdyenInternal) public init(style: Adyen.FormToggleItemStyle = FormToggleItemStyle())
  @_spi(AdyenInternal) override final public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
public struct FormToggleItemStyle : Adyen.FormValueItemStyle {
  public var title: Adyen.TextStyle
  public var tintColor: UIKit.UIColor?
  public var separatorColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor
  public init(title: Adyen.TextStyle)
  public init()
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FormToggleItemView : Adyen.FormItemView<Adyen.FormToggleItem> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: Adyen.FormToggleItem)
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override final public func accessibilityActivate() -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override final public func reset()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FormValidatableValueItem<ValueType> : Adyen.FormValueItem<ValueType, Adyen.FormTextItemStyle>, Adyen.ValidatableFormItem where ValueType : Swift.Equatable {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($validationFailureMessage) public var validationFailureMessage: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $validationFailureMessage: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var onDidShowValidationError: ((any Adyen.ValidationError) -> Swift.Void)?
  @_spi(AdyenInternal) public func isValid() -> Swift.Bool
  @_spi(AdyenInternal) public func validationStatus() -> Adyen.ValidationStatus?
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FormValidatableValueItemView<ValueType, ItemType> : Adyen.FormValueItemView<ValueType, Adyen.FormTextItemStyle, ItemType>, Adyen.AnyFormValidatableValueItemView where ValueType : Swift.Equatable, ItemType : Adyen.FormValidatableValueItem<ValueType> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: ItemType)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override open func configureSeparatorView()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var isValid: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func showValidation()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open func updateValidationStatus(forced: Swift.Bool = false)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol AnyFormValidatableValueItemView : Adyen.AnyFormValueItemView {
  @_spi(AdyenInternal) func showValidation()
  @_spi(AdyenInternal) var isValid: Swift.Bool { get }
}
public protocol FormValueItemStyle : Adyen.TintableStyle {
  var separatorColor: UIKit.UIColor? { get }
  var title: Adyen.TextStyle { get }
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers open class FormValueItem<ValueType, StyleType> : Adyen.FormItem where ValueType : Swift.Equatable, StyleType : Adyen.FormValueItemStyle {
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem] {
    get
  }
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) public var value: ValueType {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) public var publisher: Adyen.AdyenObservable<ValueType>
  @_spi(AdyenInternal) public var style: StyleType
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($title) public var title: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $title: Adyen.AdyenObservable<Swift.String?> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) open func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FormValueItemView<ValueType, Style, ItemType> : Adyen.FormItemView<ItemType>, Adyen.AnyFormValueItemView where ValueType : Swift.Equatable, Style : Adyen.FormValueItemStyle, ItemType : Adyen.FormValueItem<ValueType, Style> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: ItemType)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func didAddSubview(_ subview: UIKit.UIView)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open var isEditing: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) open func configureSeparatorView()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol AnyFormValueItemView : Adyen.AnyFormItemView {
  @_spi(AdyenInternal) var isEditing: Swift.Bool { get set }
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FormVerticalStackItemView<FormItemType> : Adyen.FormItemView<FormItemType> where FormItemType : Adyen.FormItem {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var views: [any Adyen.AnyFormItemView] {
    get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: FormItemType)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) convenience public init(item: FormItemType, itemSpacing: CoreFoundation.CGFloat)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) override public var childItemViews: [any Adyen.AnyFormItemView] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class FormView : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var stackView: UIKit.UIStackView {
    get
    set
  }
  @objc deinit
}
@_spi(AdyenInternal) @objc(ADYFormViewController) @_Concurrency.MainActor(unsafe) open class FormViewController : UIKit.UIViewController, Adyen.AdyenObserver, Adyen.PreferredContentSizeConsumer {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var requiresKeyboardInput: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var enablekeyboardObserver: Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public let style: any Adyen.ViewStyle
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) weak public var delegate: (any Adyen.ViewControllerDelegate)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(style: any Adyen.ViewStyle, localizationParameters: Adyen.LocalizationParameters?)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredContentSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func willUpdatePreferredContentSize()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func didUpdatePreferredContentSize()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func append(_ item: some FormItem)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public let localizationParameters: Adyen.LocalizationParameters?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func validate() -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func showValidation()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func resetForm()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var formView: Adyen.FormView {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func assignInitialFirstResponder()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.FormViewController : Adyen.FormTextItemViewDelegate {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func didReachMaximumLength(in itemView: Adyen.FormTextItemView<some FormTextItem>)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func didSelectReturnKey(in itemView: Adyen.FormTextItemView<some FormTextItem>)
}
@_spi(AdyenInternal) public protocol FormViewProtocol {
  @_spi(AdyenInternal) func add<T>(item: T?) where T : Adyen.FormItem
  @_spi(AdyenInternal) func displayValidation()
}
@_spi(AdyenInternal) extension Adyen.FormViewController : Adyen.FormViewProtocol {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func add(item: (some FormItem)?)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func displayValidation()
}
@_hasMissingDesignatedInitializers final public class GiftCardComponent : Adyen.PresentableComponent, Adyen.Localizable, Adyen.LoadingComponent, Adyen.AdyenObserver {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  @_spi(AdyenInternal) final public let publicKeyProvider: any Adyen.AnyPublicKeyProvider
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  final public let style: Adyen.FormComponentStyle
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  weak final public var partialPaymentDelegate: (any Adyen.PartialPaymentDelegate)?
  weak final public var readyToSubmitComponentDelegate: (any Adyen.ReadyToSubmitPaymentComponentDelegate)?
  final public var localizationParameters: Adyen.LocalizationParameters?
  convenience public init(paymentMethod: Adyen.GiftCardPaymentMethod, context: Adyen.AdyenContext, amount: Adyen.Amount, style: Adyen.FormComponentStyle = FormComponentStyle(), showsSecurityCodeField: Swift.Bool = true)
  convenience public init(paymentMethod: Adyen.MealVoucherPaymentMethod, context: Adyen.AdyenContext, amount: Adyen.Amount, style: Adyen.FormComponentStyle = FormComponentStyle(), showsSecurityCodeField: Swift.Bool = true)
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public var requiresModalPresentation: Swift.Bool {
    get
  }
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.GiftCardComponent : Adyen.PaymentComponent {
}
@_spi(AdyenInternal) extension Adyen.GiftCardComponent : Adyen.PartialPaymentComponent {
}
@_spi(AdyenInternal) extension Adyen.GiftCardComponent : Adyen.PublicKeyConsumer {
}
@_spi(AdyenInternal) extension Adyen.GiftCardComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.GiftCardComponent : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) final public func viewDidLoad(viewController: UIKit.UIViewController)
}
extension Adyen.GiftCardComponent {
  public enum Error : Foundation.LocalizedError {
    case balanceCheckFailure
    case invalidPayment
    case missingPartialPaymentDelegate
    case cardEncryptionFailed
    case otherError(any Swift.Error)
    public var errorDescription: Swift.String? {
      get
    }
  }
}
public struct GiftCardDetails : Adyen.PartialPaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let encryptedCardNumber: Swift.String
  public let encryptedSecurityCode: Swift.String
  public let brand: Swift.String
  public init(paymentMethod: Adyen.GiftCardPaymentMethod, encryptedCardNumber: Swift.String, encryptedSecurityCode: Swift.String)
  public init(paymentMethod: Adyen.GiftCardPaymentMethod, encryptedCard: Adyen.EncryptedCard) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GiftCardPaymentMethod : Adyen.PartialPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let brand: Swift.String
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class IBANFormatter : Adyen.Formatter {
  public init()
  final public func formattedValue(for value: Swift.String) -> Swift.String
  final public func sanitizedValue(for value: Swift.String) -> Swift.String
  @objc deinit
}
@_spi(AdyenInternal) public struct IBANSpecification {
  @_spi(AdyenInternal) public static let highestMaximumLength: Swift.Int
  @_spi(AdyenInternal) public let countryCode: Swift.String
  @_spi(AdyenInternal) public let length: Swift.Int
  @_spi(AdyenInternal) public let structure: Swift.String
  @_spi(AdyenInternal) public let example: Swift.String
  @_spi(AdyenInternal) public init?(forCountryCode countryCode: Swift.String)
}
@_spi(AdyenInternal) final public class IBANValidator : Adyen.Validator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) final public func maximumLength(for value: Swift.String) -> Swift.Int
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol ImageLoading {
  @_spi(AdyenInternal) @discardableResult
  func load(url: Foundation.URL, completion: @escaping ((UIKit.UIImage?) -> Swift.Void)) -> any Adyen.AdyenCancellable
}
@_spi(AdyenInternal) final public class ImageLoader : Adyen.ImageLoading {
  @_spi(AdyenInternal) public init(urlSession: Foundation.URLSession = .init(configuration: .default))
  @_spi(AdyenInternal) @discardableResult
  final public func load(url: Foundation.URL, completion: @escaping ((UIKit.UIImage?) -> Swift.Void)) -> any Adyen.AdyenCancellable
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class ImageLoaderProvider {
  @_spi(AdyenInternal) public static func imageLoader() -> any Adyen.ImageLoading
  @_spi(AdyenInternal) @objc deinit
}
public struct ImageStyle : Adyen.TintableStyle {
  public var borderColor: UIKit.UIColor?
  public var borderWidth: CoreFoundation.CGFloat
  public var cornerRounding: Adyen.CornerRounding
  public var clipsToBounds: Swift.Bool
  public var contentMode: UIKit.UIView.ContentMode
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor?
  public init(borderColor: UIKit.UIColor?, borderWidth: CoreFoundation.CGFloat, cornerRadius: CoreFoundation.CGFloat, clipsToBounds: Swift.Bool, contentMode: UIKit.UIView.ContentMode)
  public init(borderColor: UIKit.UIColor?, borderWidth: CoreFoundation.CGFloat, cornerRounding: Adyen.CornerRounding, clipsToBounds: Swift.Bool, contentMode: UIKit.UIView.ContentMode)
}
extension Adyen.ImageStyle : Swift.Equatable {
  public static func == (lhs: Adyen.ImageStyle, rhs: Adyen.ImageStyle) -> Swift.Bool
}
@_spi(AdyenInternal) public protocol InstallmentConfigurationAware : Adyen.AdyenSessionAware {
  @_spi(AdyenInternal) var installmentConfiguration: Adyen.InstallmentConfiguration? { get }
}
public struct InstallmentOptions : Swift.Equatable, Swift.Codable {
  @_spi(AdyenInternal) public let regularInstallmentMonths: [Swift.UInt]
  @_spi(AdyenInternal) public let includesRevolving: Swift.Bool
  public init(monthValues: [Swift.UInt], includesRevolving: Swift.Bool)
  public init(maxInstallmentMonth: Swift.UInt, includesRevolving: Swift.Bool)
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: Adyen.InstallmentOptions, b: Adyen.InstallmentOptions) -> Swift.Bool
}
public struct InstallmentConfiguration : Swift.Decodable {
  @_spi(AdyenInternal) public let defaultOptions: Adyen.InstallmentOptions?
  @_spi(AdyenInternal) public let cardBasedOptions: [Adyen.CardType : Adyen.InstallmentOptions]?
  @_spi(AdyenInternal) public var showInstallmentAmount: Swift.Bool
  public init(cardBasedOptions: [Adyen.CardType : Adyen.InstallmentOptions], defaultOptions: Adyen.InstallmentOptions, showInstallmentAmount: Swift.Bool = false)
  public init(cardBasedOptions: [Adyen.CardType : Adyen.InstallmentOptions], showInstallmentAmount: Swift.Bool = false)
  public init(defaultOptions: Adyen.InstallmentOptions, showInstallmentAmount: Swift.Bool = false)
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
public struct Installments : Swift.Encodable, Swift.Equatable {
  public enum Plan : Swift.String {
    case regular
    case revolving
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let totalMonths: Swift.Int
  public let plan: Adyen.Installments.Plan
  public func encode(to encoder: any Swift.Encoder) throws
  public init(totalMonths: Swift.Int, plan: Adyen.Installments.Plan)
  public static func == (a: Adyen.Installments, b: Adyen.Installments) -> Swift.Bool
}
public typealias OXXOPaymentMethod = Adyen.InstantPaymentMethod
public typealias OXXOComponent = Adyen.InstantPaymentComponent
public typealias MultibancoPaymentMethod = Adyen.InstantPaymentMethod
public typealias MultibancoComponent = Adyen.InstantPaymentComponent
@_spi(AdyenInternal) public protocol PaymentInitiable {
  @_spi(AdyenInternal) func initiatePayment()
}
final public class InstantPaymentComponent : Adyen.PaymentComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public let paymentData: Adyen.PaymentComponentData
  final public let paymentMethod: any Adyen.PaymentMethod
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, paymentData: Adyen.PaymentComponentData)
  public init(paymentMethod: any Adyen.PaymentMethod, context: Adyen.AdyenContext, order: Adyen.PartialPaymentOrder?)
  final public func initiatePayment()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.InstantPaymentComponent : Adyen.PaymentInitiable {
}
public struct InstantPaymentDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public init(type: Adyen.PaymentMethodType)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct InstantPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class IssuerListComponent : Adyen.PaymentComponent, Adyen.PaymentAware, Adyen.PresentableComponent, Adyen.LoadingComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var configuration: Adyen.IssuerListComponent.Configuration
  public init(paymentMethod: Adyen.IssuerListPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.IssuerListComponent.Configuration = .init())
  final public var viewController: UIKit.UIViewController {
    get
  }
  final public func stopLoading()
  final public var requiresModalPresentation: Swift.Bool
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.IssuerListComponent : Adyen.ViewControllerDelegate {
}
@_spi(AdyenInternal) extension Adyen.IssuerListComponent : Adyen.TrackableComponent {
}
extension Adyen.IssuerListComponent {
  public struct Configuration : Adyen.AnyBasicComponentConfiguration {
    public var style: Adyen.ListComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(style: Adyen.ListComponentStyle = .init(), localizationParameters: Adyen.LocalizationParameters? = nil)
  }
}
public typealias MOLPayComponent = Adyen.IssuerListComponent
public typealias DotpayComponent = Adyen.IssuerListComponent
public typealias EPSComponent = Adyen.IssuerListComponent
public typealias EntercashComponent = Adyen.IssuerListComponent
public typealias OpenBankingComponent = Adyen.IssuerListComponent
public typealias OnlineBankingPolandComponent = Adyen.IssuerListComponent
public struct IssuerListDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let issuer: Swift.String
  public init(paymentMethod: Adyen.IssuerListPaymentMethod, issuer: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias MOLPayDetails = Adyen.IssuerListDetails
public typealias DotpayDetails = Adyen.IssuerListDetails
public typealias EPSDetails = Adyen.IssuerListDetails
public typealias EntercashDetails = Adyen.IssuerListDetails
public typealias OpenBankingDetails = Adyen.IssuerListDetails
public typealias OnlineBankingPolandDetails = Adyen.IssuerListDetails
public struct IssuerListPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let issuers: [Adyen.Issuer]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
public enum EncryptionError : Foundation.LocalizedError {
  case invalidKey
  case invalidInitializationVector
  case encryptionFailed
  case unknownError
  case failedToGenerateRandomData
  case invalidBase64
  case other(any Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct KCPDetails : Adyen.AdditionalDetails {
  public let taxNumber: Swift.String
  public let password: Swift.String
  public init(taxNumber: Swift.String, password: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public class KeyboardObserver {
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($keyboardRect) public var keyboardRect: CoreFoundation.CGRect {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var $keyboardRect: Adyen.AdyenObservable<CoreFoundation.CGRect> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) @objc deinit
}
open class LengthValidator : Adyen.Validator {
  open var minimumLength: Swift.Int?
  open var maximumLength: Swift.Int?
  public init(minimumLength: Swift.Int? = nil, maximumLength: Swift.Int? = nil)
  public init(exactLength: Swift.Int)
  open func isValid(_ value: Swift.String) -> Swift.Bool
  public func maximumLength(for value: Swift.String) -> Swift.Int
  @objc deinit
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) public class LinkTextView : UIKit.UITextView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(linkSelectionHandler: @escaping (_ linkIndex: Swift.Int) -> Swift.Void)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func update(text: Swift.String, style: Adyen.TextStyle, linkRangeDelimiter: Swift.String = "%#")
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.LinkTextView : UIKit.UITextViewDelegate {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
@_spi(AdyenInternal) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ListCell : UIKit.UITableViewCell {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var item: Adyen.ListItem? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @objc deinit
}
public struct ListComponentStyle : Adyen.ViewStyle {
  public var listItem: Adyen.ListItemStyle
  public var sectionHeader: Adyen.ListSectionHeaderStyle
  public var partialPaymentSectionFooter: Adyen.ListSectionFooterStyle
  public var backgroundColor: UIKit.UIColor
  public init(listItem: Adyen.ListItemStyle, sectionHeader: Adyen.ListSectionHeaderStyle)
  public init()
}
@_spi(AdyenInternal) public class ListItem : Adyen.FormItem {
  @_spi(AdyenInternal) public enum TrailingInfoType {
    @_spi(AdyenInternal) case text(Swift.String)
    @_spi(AdyenInternal) case logos(urls: [Foundation.URL], trailingText: Swift.String?)
  }
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) final public let style: Adyen.ListItemStyle
  @_spi(AdyenInternal) public var title: Swift.String
  @_spi(AdyenInternal) public var subtitle: Swift.String?
  @_spi(AdyenInternal) public var icon: Adyen.ListItem.Icon?
  @_spi(AdyenInternal) public var trailingInfo: Adyen.ListItem.TrailingInfoType?
  @_spi(AdyenInternal) public var selectionHandler: (() -> Swift.Void)?
  @_spi(AdyenInternal) public var deletionHandler: ((Foundation.IndexPath, @escaping Adyen.Completion<Swift.Bool>) -> Swift.Void)?
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) final public let accessibilityLabel: Swift.String
  @_spi(AdyenInternal) public init(title: Swift.String, subtitle: Swift.String? = nil, icon: Adyen.ListItem.Icon? = nil, trailingInfo: Adyen.ListItem.TrailingInfoType? = nil, style: Adyen.ListItemStyle = ListItemStyle(), identifier: Swift.String? = nil, accessibilityLabel: Swift.String? = nil, selectionHandler: (() -> Swift.Void)? = nil)
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) public func startLoading()
  @_spi(AdyenInternal) public func stopLoading()
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.ListItem : Swift.Hashable {
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public static func == (lhs: Adyen.ListItem, rhs: Adyen.ListItem) -> Swift.Bool
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.ListItem {
  @_spi(AdyenInternal) public struct Icon : Swift.Hashable {
    @_spi(AdyenInternal) public enum Location : Swift.Hashable {
      @_spi(AdyenInternal) case local(image: UIKit.UIImage)
      @_spi(AdyenInternal) case remote(url: Foundation.URL?)
      @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
      @_spi(AdyenInternal) public static func == (a: Adyen.ListItem.Icon.Location, b: Adyen.ListItem.Icon.Location) -> Swift.Bool
      @_spi(AdyenInternal) public var hashValue: Swift.Int {
        @_spi(AdyenInternal) get
      }
    }
    @_spi(AdyenInternal) public let location: Adyen.ListItem.Icon.Location
    @_spi(AdyenInternal) public let canBeModified: Swift.Bool
    @_spi(AdyenInternal) public init(location: Adyen.ListItem.Icon.Location, canBeModified: Swift.Bool = true)
    @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(AdyenInternal) public static func == (a: Adyen.ListItem.Icon, b: Adyen.ListItem.Icon) -> Swift.Bool
    @_spi(AdyenInternal) public var hashValue: Swift.Int {
      @_spi(AdyenInternal) get
    }
  }
}
@_spi(AdyenInternal) extension Adyen.ListItem.Icon {
  @_spi(AdyenInternal) public init(url: Foundation.URL?, canBeModified: Swift.Bool = true)
  @_spi(AdyenInternal) public init(image: UIKit.UIImage, canBeModified: Swift.Bool = true)
}
public struct ListItemStyle : Adyen.ViewStyle {
  public var title: Adyen.TextStyle
  public var subtitle: Adyen.TextStyle
  public var trailingText: Adyen.TextStyle
  public var image: Adyen.ImageStyle
  public var backgroundColor: UIKit.UIColor
  public init(title: Adyen.TextStyle, subtitle: Adyen.TextStyle, image: Adyen.ImageStyle)
  public init()
}
extension Adyen.ListItemStyle : Swift.Equatable {
  public static func == (lhs: Adyen.ListItemStyle, rhs: Adyen.ListItemStyle) -> Swift.Bool
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) final public class ListItemView : UIKit.UIView, Adyen.AnyFormItemView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var childItemViews: [any Adyen.AnyFormItemView]
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(imageLoader: any Adyen.ImageLoading = ImageLoaderProvider.imageLoader())
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public func reset()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var item: Adyen.ListItem? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToWindow()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public enum EditingStyle {
  @_spi(AdyenInternal) case delete
  @_spi(AdyenInternal) case none
  @_spi(AdyenInternal) public static func == (a: Adyen.EditingStyle, b: Adyen.EditingStyle) -> Swift.Bool
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct ListSection : Swift.Hashable {
  @_spi(AdyenInternal) public let header: Adyen.ListSectionHeader?
  @_spi(AdyenInternal) public var items: [Adyen.ListItem] {
    get
  }
  @_spi(AdyenInternal) public let footer: Adyen.ListSectionFooter?
  @_spi(AdyenInternal) public var isEditable: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public init(header: Adyen.ListSectionHeader? = nil, items: [Adyen.ListItem], footer: Adyen.ListSectionFooter? = nil)
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public static func == (lhs: Adyen.ListSection, rhs: Adyen.ListSection) -> Swift.Bool
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct ListSectionHeader : Swift.Hashable {
  @_spi(AdyenInternal) public var title: Swift.String
  @_spi(AdyenInternal) public var style: Adyen.ListSectionHeaderStyle
  @_spi(AdyenInternal) public var editingStyle: Adyen.EditingStyle
  @_spi(AdyenInternal) public init(title: Swift.String, editingStyle: Adyen.EditingStyle = .none, style: Adyen.ListSectionHeaderStyle)
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public static func == (lhs: Adyen.ListSectionHeader, rhs: Adyen.ListSectionHeader) -> Swift.Bool
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
public struct ListSectionFooter : Swift.Hashable {
  public var title: Swift.String
  public var style: Adyen.ListSectionFooterStyle
  public init(title: Swift.String, style: Adyen.ListSectionFooterStyle)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Adyen.ListSectionFooter, rhs: Adyen.ListSectionFooter) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ListSectionFooterStyle : Adyen.ViewStyle {
  public var title: Adyen.TextStyle
  public var separatorColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(title: Adyen.TextStyle)
  public init()
}
public struct ListSectionHeaderStyle : Adyen.ViewStyle {
  public var title: Adyen.TextStyle
  public var trailingButton: Adyen.ButtonStyle
  public var backgroundColor: UIKit.UIColor
  public init(title: Adyen.TextStyle)
  public init()
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) final public class ListViewController : UIKit.UITableViewController {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public let style: any Adyen.ViewStyle
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) weak final public var delegate: (any Adyen.ViewControllerDelegate)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(style: any Adyen.ViewStyle)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var preferredContentSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var sections: [Adyen.ListSection] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public func reload(newSections: [Adyen.ListSection], animated: Swift.Bool = false)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public func deleteItem(at indexPath: Foundation.IndexPath, animated: Swift.Bool = true)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public func stopLoading()
  @_spi(AdyenInternal) @objc deinit
}
public protocol ComponentLoader : Adyen.LoadingComponent {
  func startLoading(for component: any Adyen.PaymentComponent)
}
public protocol LoadingComponent {
  func stopLoading()
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) final public class LoadingView : UIKit.UIControl {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var disableUserInteractionWhileLoading: Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var spinnerAppearanceDelay: Dispatch.DispatchTimeInterval
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(contentView: UIKit.UIView)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var showsActivityIndicator: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public struct Region : Swift.Decodable, Swift.CustomStringConvertible, Swift.Equatable {
  @_spi(AdyenInternal) public let identifier: Swift.String
  @_spi(AdyenInternal) public let name: Swift.String
  @_spi(AdyenInternal) public var description: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public static func == (a: Adyen.Region, b: Adyen.Region) -> Swift.Bool
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public func localizedString(_ key: Adyen.LocalizationKey, _ parameters: Adyen.LocalizationParameters?, _ arguments: any Swift.CVarArg...) -> Swift.String
@_spi(AdyenInternal) public enum PaymentStyle {
  @_spi(AdyenInternal) case needsRedirectToThirdParty(Swift.String)
  @_spi(AdyenInternal) case immediate
}
@_spi(AdyenInternal) public func localizedSubmitButtonTitle(with amount: Adyen.Amount?, style: Adyen.PaymentStyle, _ parameters: Adyen.LocalizationParameters?) -> Swift.String
@_spi(AdyenInternal) public struct LocalizationKey {
  @_spi(AdyenInternal) public static let submitButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let submitButtonFormatted: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cancelButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let dismissButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let removeButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let errorTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let errorUnknown: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let validationAlertTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentMethodsOtherMethods: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentMethodsStoredMethods: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentMethodsPaidMethods: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentMethodsTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentMethodRemoveButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paymentRefusedMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaIbanItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaIbanItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaNameItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaNameItemPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaConsentLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let sepaNameItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardStoreDetailsButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNameItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNameItemPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNameItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNumberItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNumberItemPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNumberItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardExpiryItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardExpiryItemTitleOptional: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardExpiryItemPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardExpiryItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardCvcItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardCvcItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardCvcItemPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardStoredTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardStoredMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardStoredExpires: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNumberItemUnsupportedBrand: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardNumberItemUnknownBrand: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let dropInStoredTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let dropInPreselectedOpenAllTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let continueTo: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let continueTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let phoneNumberTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let phoneNumberInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let telephonePrefix: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let phoneNumberPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardCvcItemPlaceholderDigits: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let emailItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let emailItemPlaceHolder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let emailItemInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let moreOptions: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let applePayTotal: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let mbwayConfirmPayment: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let awaitWaitForConfirmation: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let blikConfirmPayment: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let blikInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let blikCode: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let blikHelp: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let blikPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let preauthorizeWith: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let confirmPreauthorization: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardCvcItemTitleOptional: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let confirmPurchase: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let lastName: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let firstName: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardPinTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let missingField: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardApplyGiftcard: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherCollectionInstitutionNumber: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherMerchantName: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherExpirationDate: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherPaymentReferenceLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherShopperName: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let buttonCopy: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherIntroduction: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherReadInstructions: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherSaveImage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherFinish: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardBrazilSSNPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let amount: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherEntity: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pixInstructions: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pixExpirationLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pixCopyButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pixInstructionsCopiedMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let billingAddressSectionTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let billingAddressPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let deliveryAddressSectionTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let deliveryAddressPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let countryFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let countryFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let countryFieldInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let streetFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let streetFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let houseNumberFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let houseNumberFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cityFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cityFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cityTownFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cityTownFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let postalCodeFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let postalCodeFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let zipCodeFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let zipCodeFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let stateFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let stateFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let selectStateFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let stateOrProvinceFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let stateOrProvinceFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let selectStateOrProvinceFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let provinceOrTerritoryFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let provinceOrTerritoryFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let apartmentSuiteFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let apartmentSuiteFieldPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let errorFeedbackEmptyField: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let errorFeedbackIncorrectFormat: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let fieldTitleOptional: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let boletobancarioBtnLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let boletoSendCopyToEmail: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let boletoPersonalDetails: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let boletoSocialSecurityNumber: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let boletoDownloadPdf: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let giftcardCurrencyError: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let giftcardNoBalance: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let giftcardRemoveTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let giftcardRemoveMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let giftcardPaymentMethodTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let partialPaymentRemainingBalance: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let partialPaymentPayRemainingAmount: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardTaxNumberLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardTaxNumberPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardTaxNumberInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardEncryptedPasswordLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardEncryptedPasswordPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardEncryptedPasswordInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardTaxNumberLabelShort: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let affirmDeliveryAddressToggleTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherShopperReference: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let voucherAlternativeReference: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsNumberOfInstallments: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsOneTime: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsRevolving: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsMonthsAndPrice: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsMonths: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cardInstallmentsPlan: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsHolderNameFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsBankAccountNumberFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsBankLocationIdFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsLegalConsentToggleTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsAmountConsentToggleTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsSpecifiedAmountConsentToggleTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsHolderNameFieldInvalidMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsBankAccountNumberFieldInvalidMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsBankLocationIdFieldInvalidMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsPaymentButtonTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let bacsDownloadMandate: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achBankAccountTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountHolderNameFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountHolderNameFieldInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountNumberFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountNumberFieldInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountLocationFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let achAccountLocationFieldInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let selectFieldTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let onlineBankingTermsAndConditions: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let qrCodeInstructionMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let qrCodeTimerExpirationMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paybybankSubtitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let paybybankTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let searchPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let upiModeSelection: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIVpaValidationMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIQrcodeGenerationMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIQrcodeTimerMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let upiCollectConfirmPayment: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let upiVpaWaitingMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let QRCodeGenerateQRCode: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIQRCodeInstructions: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIFirstTabTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPISecondTabTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPICollectDropdownLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPICollectFieldLabel: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let UPIErrorNoAppSelected: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cashAppPayTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let cashAppPayCashtag: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let twintNoAppsInstalledMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DABiometrics: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAFaceID: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DATouchID: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAOpticID: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationDescription: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationFirstInfo: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationSecondInfo: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationThirdInfo: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationPositiveButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationNegativeButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalDescription: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalPositiveButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalNegativeButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalActionSheetTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalActionSheetFallback: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalActionSheetRemove: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalRemoveAlertTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalRemoveAlertDescription: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalRemoveAlertPositiveButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalRemoveAlertNegativeButton: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalErrorTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalErrorMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DAApprovalErrorButtonTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationErrorTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationErrorMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DARegistrationErrorButtonTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DADeletionConfirmationTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DADeletionConfirmationMessage: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let threeds2DADeletionConfirmationButtonTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pickerSearchEmptyTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let pickerSearchEmptySubtitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchPlaceholder: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchEmptyTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchEmptySubtitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchEmptyTitleNoResults: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchEmptySubtitleNoResults: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupItemValidationFailureMessageEmpty: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupItemValidationFailureMessageInvalid: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let addressLookupSearchManualEntryItemTitle: Adyen.LocalizationKey
  @_spi(AdyenInternal) public static let accessibilityLastFourDigits: Adyen.LocalizationKey
  @_spi(AdyenInternal) public init(key: Swift.String)
}
public struct LocalizationParameters : Swift.Equatable {
  public static func == (lhs: Adyen.LocalizationParameters, rhs: Adyen.LocalizationParameters) -> Swift.Bool
  public var locale: Swift.String? {
    get
  }
  public var tableName: Swift.String? {
    get
  }
  public var keySeparator: Swift.String? {
    get
  }
  public var bundle: Foundation.Bundle? {
    get
  }
  public init(bundle: Foundation.Bundle? = nil, tableName: Swift.String? = nil, keySeparator: Swift.String? = nil, locale: Swift.String? = nil)
  public init(enforcedLocale: Swift.String)
}
public enum AdyenLogging {
  public static var isEnabled: Swift.Bool {
    get
    set
  }
}
@_spi(AdyenInternal) public func adyenPrint(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n")
final public class LogoURLProvider {
  public init(environment: any AdyenNetworking.AnyAPIEnvironment)
  final public func logoURL(withName name: Swift.String, size: Adyen.LogoURLProvider.Size = .small) -> Foundation.URL
  public static func logoURL(for issuer: Adyen.Issuer, localizedParameters: Adyen.LocalizationParameters?, paymentMethod: Adyen.IssuerListPaymentMethod, environment: any AdyenNetworking.AnyAPIEnvironment) -> Foundation.URL
  public static func logoURL(withName name: Swift.String, environment: any AdyenNetworking.AnyAPIEnvironment, size: Adyen.LogoURLProvider.Size = .small) -> Foundation.URL
  @objc deinit
}
extension Adyen.LogoURLProvider {
  public enum Size : Swift.String {
    case small
    case medium
    case large
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
final public class MBWayComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: Adyen.MBWayPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.MBWayComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func phoneExtensions() -> [Adyen.PhoneExtension]
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @objc deinit
}
public struct MBWayDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let telephoneNumber: Swift.String
  public init(paymentMethod: any Adyen.PaymentMethod, telephoneNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MBWayPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MealVoucherDetails : Adyen.PartialPaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let encryptedCardNumber: Swift.String
  public let encryptedSecurityCode: Swift.String
  public let encryptedExpiryMonth: Swift.String?
  public let encryptedExpiryYear: Swift.String?
  public init(paymentMethod: Adyen.MealVoucherPaymentMethod, encryptedCard: Adyen.EncryptedCard) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MealVoucherPaymentMethod : Adyen.PartialPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ModalToolbar : UIKit.UIView, Adyen.AnyNavigationBar {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var onCancelHandler: (() -> Swift.Void)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(title: Swift.String?, style: Adyen.NavigationStyle)
  @_spi(AdyenInternal) @objc deinit
}
@_hasMissingDesignatedInitializers final public class MultibancoVoucherAction : Adyen.GenericVoucherAction {
  final public let entity: Swift.String
  final public let merchantReference: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension Adyen.RedirectDetails : AdyenNetworking.Response {
}
public enum CancelButtonStyle {
  case system
  case legacy
  case custom(UIKit.UIImage)
}
public enum ToolbarMode {
  case leftCancel
  case rightCancel
  case natural
  public static func == (a: Adyen.ToolbarMode, b: Adyen.ToolbarMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct NavigationStyle : Adyen.TintableStyle {
  public var backgroundColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor?
  public var tintColor: UIKit.UIColor?
  public var cornerRadius: CoreFoundation.CGFloat
  public var barTitle: Adyen.TextStyle
  public var cancelButton: Adyen.CancelButtonStyle
  public var toolbarMode: Adyen.ToolbarMode
  public init()
}
@_spi(AdyenInternal) extension UIKit.NSLayoutConstraint : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = UIKit.NSLayoutConstraint
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.NSLayoutConstraint {
  @_spi(AdyenInternal) public func with(priority: UIKit.UILayoutPriority) -> UIKit.NSLayoutConstraint
}
@_spi(AdyenInternal) extension UIKit.NSTextAlignment : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = UIKit.NSTextAlignment
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == UIKit.NSTextAlignment {
  @_spi(AdyenInternal) public var caAlignmentMode: QuartzCore.CATextLayerAlignmentMode {
    @_spi(AdyenInternal) get
  }
}
open class NumericFormatter : Adyen.Formatter {
  public init()
  open func formattedValue(for value: Swift.String) -> Swift.String
  open func sanitizedValue(for value: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class NumericStringValidator : Adyen.LengthValidator {
  override open func isValid(_ value: Swift.String) -> Swift.Bool
  override public init(minimumLength: Swift.Int? = nil, maximumLength: Swift.Int? = nil)
  override public init(exactLength: Swift.Int)
  @objc deinit
}
@_spi(AdyenInternal) public struct Observation : Swift.Hashable {
  @_spi(AdyenInternal) public static func == (lhs: Adyen.Observation, rhs: Adyen.Observation) -> Swift.Bool
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
final public class OnlineBankingComponent : Adyen.PaymentComponent, Adyen.PresentableComponent, Adyen.LoadingComponent, Adyen.PaymentAware {
  public typealias Configuration = Adyen.BasicComponentConfiguration
  @_spi(AdyenInternal) final public var context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public var requiresModalPresentation: Swift.Bool
  final public var configuration: Adyen.OnlineBankingComponent.Configuration
  public init(paymentMethod: Adyen.OnlineBankingPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.OnlineBankingComponent.Configuration = .init())
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.OnlineBankingComponent : Adyen.AdyenObserver {
}
public struct OnlineBankingDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let issuer: Swift.String
  public init(paymentMethod: any Adyen.PaymentMethod, issuer: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Issuer : Swift.Codable, Swift.CustomStringConvertible, Swift.Equatable {
  public let identifier: Swift.String
  public let name: Swift.String
  public var description: Swift.String {
    get
  }
  public static func == (a: Adyen.Issuer, b: Adyen.Issuer) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OnlineBankingPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let issuers: [Adyen.Issuer]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public struct OrderStatusRequest : Adyen.APIRequest {
  @_spi(AdyenInternal) public typealias ResponseType = Adyen.OrderStatusResponse
  @_spi(AdyenInternal) public var path: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var counter: Swift.UInt
  @_spi(AdyenInternal) public let headers: [Swift.String : Swift.String]
  @_spi(AdyenInternal) public let queryParameters: [Foundation.URLQueryItem]
  @_spi(AdyenInternal) public let method: AdyenNetworking.HTTPMethod
  @_spi(AdyenInternal) public let orderData: Swift.String
  @_spi(AdyenInternal) public init(orderData: Swift.String)
  @_spi(AdyenInternal) public typealias ErrorResponseType = Adyen.APIError
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public struct OrderStatusResponse : AdyenNetworking.Response {
  @_spi(AdyenInternal) public let remainingAmount: Adyen.Amount
  @_spi(AdyenInternal) public let paymentMethods: [Adyen.OrderPaymentMethod]?
  @_spi(AdyenInternal) public init(remainingAmount: Adyen.Amount, paymentMethods: [Adyen.OrderPaymentMethod]?)
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public struct OrderPaymentMethod : Adyen.PaymentMethod {
  @_spi(AdyenInternal) public var name: Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public let lastFour: Swift.String
  @_spi(AdyenInternal) public let type: Adyen.PaymentMethodType
  @_spi(AdyenInternal) public let transactionLimit: Adyen.Amount?
  @_spi(AdyenInternal) public let amount: Adyen.Amount
  @_spi(AdyenInternal) public init(lastFour: Swift.String, type: Adyen.PaymentMethodType, transactionLimit: Adyen.Amount?, amount: Adyen.Amount)
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class OXXOVoucherAction : Adyen.GenericVoucherAction {
  final public let alternativeReference: Swift.String
  final public let merchantReference: Swift.String
  final public let downloadUrl: Foundation.URL
  final public let instructionsURL: Foundation.URL
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_spi(AdyenInternal) public protocol PartialPaymentComponent : Adyen.AdyenContextAware {
  @_spi(AdyenInternal) var partialPaymentDelegate: (any Adyen.PartialPaymentDelegate)? { get set }
  @_spi(AdyenInternal) var readyToSubmitComponentDelegate: (any Adyen.ReadyToSubmitPaymentComponentDelegate)? { get set }
}
public protocol PartialPaymentDelegate : AnyObject {
  func checkBalance(with data: Adyen.PaymentComponentData, component: any Adyen.Component, completion: @escaping (Swift.Result<Adyen.Balance, any Swift.Error>) -> Swift.Void)
  func requestOrder(for component: any Adyen.Component, completion: @escaping (Swift.Result<Adyen.PartialPaymentOrder, any Swift.Error>) -> Swift.Void)
  func cancelOrder(_ order: Adyen.PartialPaymentOrder, component: any Adyen.Component)
}
public enum PartialPaymentError : Foundation.LocalizedError {
  case zeroRemainingAmount
  case missingOrderData
  case notSupportedForComponent
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: Adyen.PartialPaymentError, b: Adyen.PartialPaymentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PartialPaymentMethodDetails : Adyen.PaymentMethodDetails {
  var type: Adyen.PaymentMethodType { get }
  var encryptedCardNumber: Swift.String { get }
  var encryptedSecurityCode: Swift.String { get }
}
public struct PartialPaymentOrder : Swift.Codable, Swift.Equatable {
  public struct CompactOrder : Swift.Encodable, Swift.Equatable {
    public let pspReference: Swift.String
    public let orderData: Swift.String?
    public static func == (a: Adyen.PartialPaymentOrder.CompactOrder, b: Adyen.PartialPaymentOrder.CompactOrder) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public let compactOrder: Adyen.PartialPaymentOrder.CompactOrder
  public let pspReference: Swift.String
  public let orderData: Swift.String?
  public let reference: Swift.String?
  public let amount: Adyen.Amount?
  public let remainingAmount: Adyen.Amount?
  public let expiresAt: Foundation.Date?
  public init(pspReference: Swift.String, orderData: Swift.String?, reference: Swift.String? = nil, amount: Adyen.Amount? = nil, remainingAmount: Adyen.Amount? = nil, expiresAt: Foundation.Date? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: Adyen.PartialPaymentOrder, b: Adyen.PartialPaymentOrder) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Payment : Swift.Codable {
  public let amount: Adyen.Amount
  public let countryCode: Swift.String
  public init(amount: Adyen.Amount, countryCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PartialPaymentOrderAware {
  var order: Adyen.PartialPaymentOrder? { get set }
}
public protocol PaymentAware {
  var payment: Adyen.Payment? { get }
}
@_spi(AdyenInternal) extension Adyen.PartialPaymentOrderAware {
  @_spi(AdyenInternal) public var order: Adyen.PartialPaymentOrder? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
}
public protocol PaymentMethodAware {
  var paymentMethod: any Adyen.PaymentMethod { get }
}
public protocol PaymentComponent : Adyen.Component, Adyen.PartialPaymentOrderAware, Adyen.PaymentMethodAware {
  var delegate: (any Adyen.PaymentComponentDelegate)? { get set }
}
@_spi(AdyenInternal) extension Adyen.PaymentComponent {
  @_spi(AdyenInternal) public func submit(data: Adyen.PaymentComponentData, component: (any Adyen.PaymentComponent)? = nil)
}
extension Adyen.AdyenContextAware where Self : Adyen.PaymentAware {
  public var payment: Adyen.Payment? {
    get
  }
}
public protocol PaymentComponentDelegate : AnyObject {
  func didSubmit(_ data: Adyen.PaymentComponentData, from component: any Adyen.PaymentComponent)
  func didFail(with error: any Swift.Error, from component: any Adyen.PaymentComponent)
}
@_spi(AdyenInternal) public protocol PaymentComponentBuilder : Adyen.AdyenContextAware {
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.StoredCardPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: any Adyen.StoredPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.StoredBCMCPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.StoredACHDirectDebitPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.CardPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.BCMCPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.IssuerListPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.SEPADirectDebitPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.BACSDirectDebitPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.ACHDirectDebitPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.ApplePayPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.WeChatPayPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.QiwiWalletPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.MBWayPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.BLIKPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.DokuPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.EContextPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.GiftCardPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.MealVoucherPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.BoletoPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.AffirmPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.AtomePaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.OnlineBankingPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.UPIPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.CashAppPayPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.StoredCashAppPayPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.TwintPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: Adyen.StoredTwintPaymentMethod) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) func build(paymentMethod: any Adyen.PaymentMethod) -> (any Adyen.PaymentComponent)?
}
public struct PaymentComponentData {
  public let amount: Adyen.Amount?
  public let paymentMethod: any Adyen.PaymentMethodDetails
  public let storePaymentMethod: Swift.Bool?
  public let order: Adyen.PartialPaymentOrder?
  @available(*, deprecated, message: "This property is deprecated. Use the amount property if needed.")
  public var amountToPay: Adyen.Amount? {
    get
  }
  public let installments: Adyen.Installments?
  public let supportNativeRedirect: Swift.Bool
  public var shopperName: Adyen.ShopperName? {
    get
  }
  public var emailAddress: Swift.String? {
    get
  }
  public var telephoneNumber: Swift.String? {
    get
  }
  public let browserInfo: Adyen.BrowserInfo?
  public var checkoutAttemptId: Swift.String? {
    get
  }
  public var billingAddress: Adyen.PostalAddress? {
    get
  }
  public var deliveryAddress: Adyen.PostalAddress? {
    get
  }
  public var socialSecurityNumber: Swift.String? {
    get
  }
  public var delegatedAuthenticationData: Adyen.DelegatedAuthenticationData? {
    get
  }
  @_spi(AdyenInternal) public init(paymentMethodDetails: some PaymentMethodDetails, amount: Adyen.Amount?, order: Adyen.PartialPaymentOrder?, storePaymentMethod: Swift.Bool? = nil, browserInfo: Adyen.BrowserInfo? = nil, installments: Adyen.Installments? = nil)
  @_spi(AdyenInternal) public func replacing(order: Adyen.PartialPaymentOrder) -> Adyen.PaymentComponentData
  @_spi(AdyenInternal) public func replacing(amount: Adyen.Amount) -> Adyen.PaymentComponentData
  @_spi(AdyenInternal) public func replacing(checkoutAttemptId: Swift.String?) -> Adyen.PaymentComponentData
  @_spi(AdyenInternal) public func dataByAddingBrowserInfo(completion: @escaping ((_ newData: Adyen.PaymentComponentData) -> Swift.Void))
}
public protocol PaymentMethod : Swift.Decodable, Swift.Encodable {
  var type: Adyen.PaymentMethodType { get }
  var name: Swift.String { get }
  var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation? { get set }
  @_spi(AdyenInternal) func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  @_spi(AdyenInternal) func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
extension Adyen.PaymentMethod {
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
public protocol PartialPaymentMethod : Adyen.PaymentMethod {
}
@_spi(AdyenInternal) extension Adyen.PaymentMethod {
  @_spi(AdyenInternal) public func displayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
}
public protocol StoredPaymentMethod : Adyen.PaymentMethod {
  var identifier: Swift.String { get }
  var supportedShopperInteractions: [Adyen.ShopperInteraction] { get }
}
@_spi(AdyenInternal) public func == (lhs: any Adyen.StoredPaymentMethod, rhs: any Adyen.StoredPaymentMethod) -> Swift.Bool
@_spi(AdyenInternal) public func != (lhs: any Adyen.StoredPaymentMethod, rhs: any Adyen.StoredPaymentMethod) -> Swift.Bool
@_spi(AdyenInternal) public func == (lhs: any Adyen.PaymentMethod, rhs: any Adyen.PaymentMethod) -> Swift.Bool
@_spi(AdyenInternal) public func != (lhs: any Adyen.PaymentMethod, rhs: any Adyen.PaymentMethod) -> Swift.Bool
public struct PaymentMethodListConfiguration {
  public init()
  public var allowDisablingStoredPaymentMethods: Swift.Bool
}
public struct PaymentMethods : Swift.Codable {
  public var paid: [any Adyen.PaymentMethod]
  public var regular: [any Adyen.PaymentMethod]
  public var stored: [any Adyen.StoredPaymentMethod]
  public init(regular: [any Adyen.PaymentMethod], stored: [any Adyen.StoredPaymentMethod])
  public mutating func overrideDisplayInformation<T>(ofStoredPaymentMethod type: Adyen.PaymentMethodType, with displayInformation: Adyen.MerchantCustomDisplayInformation, where predicate: (T) -> Swift.Bool) where T : Adyen.PaymentMethod
  public mutating func overrideDisplayInformation(ofStoredPaymentMethod type: Adyen.PaymentMethodType, with displayInformation: Adyen.MerchantCustomDisplayInformation)
  public mutating func overrideDisplayInformation<T>(ofRegularPaymentMethod type: Adyen.PaymentMethodType, with displayInformation: Adyen.MerchantCustomDisplayInformation, where predicate: (T) -> Swift.Bool) where T : Adyen.PaymentMethod
  public mutating func overrideDisplayInformation(ofRegularPaymentMethod type: Adyen.PaymentMethodType, with displayInformation: Adyen.MerchantCustomDisplayInformation)
  public func paymentMethod<T>(ofType type: T.Type) -> T? where T : Adyen.PaymentMethod
  public func paymentMethod<T>(ofType type: T.Type, where predicate: (T) -> Swift.Bool) -> T? where T : Adyen.PaymentMethod
  public func paymentMethod(ofType type: Adyen.PaymentMethodType) -> (any Adyen.PaymentMethod)?
  public func paymentMethod<T>(ofType type: Adyen.PaymentMethodType, where predicate: (T) -> Swift.Bool) -> T? where T : Adyen.PaymentMethod
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum PaymentMethodType : Swift.RawRepresentable, Swift.Hashable, Swift.Codable {
  case card
  case scheme
  case ideal
  case entercash
  case eps
  case dotpay
  case onlineBankingPoland
  case openBankingUK
  case molPayEBankingFPXMY
  case molPayEBankingTH
  case molPayEBankingVN
  case sepaDirectDebit
  case applePay
  case payPal
  case bcmc
  case bcmcMobile
  case qiwiWallet
  case weChatPaySDK
  case mbWay
  case blik
  case dokuWallet
  case dokuAlfamart
  case dokuIndomaret
  case giftcard
  case doku
  case econtextSevenEleven
  case econtextStores
  case econtextATM
  case econtextOnline
  case boleto
  case affirm
  case oxxo
  case bacsDirectDebit
  case achDirectDebit
  case multibanco
  case atome
  case onlineBankingCZ
  case onlineBankingSK
  case mealVoucherNatixis
  case mealVoucherGroupeUp
  case mealVoucherSodexo
  case upi
  case cashAppPay
  case twint
  case other(Swift.String)
  case bcmcMobileQR
  case weChatMiniProgram
  case weChatQR
  case weChatPayWeb
  case googlePay
  case afterpay
  case androidPay
  case amazonPay
  case upiCollect
  case upiIntent
  case upiQr
  case bizum
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension Adyen.PaymentMethodType {
  @_spi(AdyenInternal) public var name: Swift.String {
    get
  }
}
@_spi(AdyenInternal) public struct PaymentStatusRequest : Adyen.APIRequest {
  @_spi(AdyenInternal) public typealias ResponseType = Adyen.PaymentStatusResponse
  @_spi(AdyenInternal) public let path: Swift.String
  @_spi(AdyenInternal) public var counter: Swift.UInt
  @_spi(AdyenInternal) public let headers: [Swift.String : Swift.String]
  @_spi(AdyenInternal) public let queryParameters: [Foundation.URLQueryItem]
  @_spi(AdyenInternal) public let method: AdyenNetworking.HTTPMethod
  @_spi(AdyenInternal) public let paymentData: Swift.String
  @_spi(AdyenInternal) public init(paymentData: Swift.String)
  @_spi(AdyenInternal) public typealias ErrorResponseType = Adyen.APIError
  @_spi(AdyenInternal) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(AdyenInternal) public enum PaymentResultCode : Swift.String, Swift.Decodable {
  @_spi(AdyenInternal) case authorised
  @_spi(AdyenInternal) case refused
  @_spi(AdyenInternal) case pending
  @_spi(AdyenInternal) case cancelled
  @_spi(AdyenInternal) case error
  @_spi(AdyenInternal) case received
  @_spi(AdyenInternal) case redirectShopper
  @_spi(AdyenInternal) case identifyShopper
  @_spi(AdyenInternal) case challengeShopper
  @_spi(AdyenInternal) public init?(rawValue: Swift.String)
  @_spi(AdyenInternal) public typealias RawValue = Swift.String
  @_spi(AdyenInternal) public var rawValue: Swift.String {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct PaymentStatusResponse : AdyenNetworking.Response {
  @_spi(AdyenInternal) public let payload: Swift.String
  @_spi(AdyenInternal) public let resultCode: Adyen.PaymentResultCode
  @_spi(AdyenInternal) public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public enum PhoneNumberPaymentMethod {
  @_spi(AdyenInternal) case qiwiWallet
  @_spi(AdyenInternal) case mbWay
  @_spi(AdyenInternal) case generic
  @_spi(AdyenInternal) public static func == (a: Adyen.PhoneNumberPaymentMethod, b: Adyen.PhoneNumberPaymentMethod) -> Swift.Bool
  @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
  @_spi(AdyenInternal) public var hashValue: Swift.Int {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public struct PhoneExtensionsQuery {
  @_spi(AdyenInternal) public let codes: [Swift.String]
  @_spi(AdyenInternal) public init(codes: [Swift.String])
  @_spi(AdyenInternal) public init(paymentMethod: Adyen.PhoneNumberPaymentMethod)
}
@_spi(AdyenInternal) public enum PhoneExtensionsRepository {
  @_spi(AdyenInternal) public static func get(with query: Adyen.PhoneExtensionsQuery) -> [Adyen.PhoneExtension]
}
@_spi(AdyenInternal) final public class PhoneNumberValidator : Adyen.RegularExpressionValidator {
  @_spi(AdyenInternal) public init()
  @_spi(AdyenInternal) @objc deinit
}
public struct PostalAddress : Swift.Equatable, Swift.Encodable {
  public init(city: Swift.String? = nil, country: Swift.String? = nil, houseNumberOrName: Swift.String? = nil, postalCode: Swift.String? = nil, stateOrProvince: Swift.String? = nil, street: Swift.String? = nil, apartment: Swift.String? = nil)
  public var city: Swift.String?
  public var country: Swift.String?
  public var houseNumberOrName: Swift.String?
  public var postalCode: Swift.String?
  public var stateOrProvince: Swift.String?
  public var street: Swift.String?
  public var apartment: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: Adyen.PostalAddress, rhs: Adyen.PostalAddress) -> Swift.Bool
  public var isEmpty: Swift.Bool {
    get
  }
}
extension Adyen.PostalAddress {
  @_spi(AdyenInternal) public func formatted(using localizationParameters: Adyen.LocalizationParameters?) -> Swift.String
  @_spi(AdyenInternal) public var formattedStreet: Swift.String {
    get
  }
  @_spi(AdyenInternal) public func formattedLocation(using localizationParameters: Adyen.LocalizationParameters?) -> Swift.String
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers final public class PostalCodeValidator : Adyen.LengthValidator, Adyen.StatusValidator {
  @_spi(AdyenInternal) final public func validate(_ value: Swift.String) -> Adyen.ValidationStatus
  @_spi(AdyenInternal) override final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) override public init(minimumLength: Swift.Int? = nil, maximumLength: Swift.Int? = nil)
  @_spi(AdyenInternal) override public init(exactLength: Swift.Int)
  @_spi(AdyenInternal) @objc deinit
}
public struct PhoneNumber {
  public let value: Swift.String
  public let callingCode: Swift.String?
  public init(value: Swift.String, callingCode: Swift.String?)
}
public struct PrefilledShopperInformation : Adyen.ShopperInformation {
  public var shopperName: Adyen.ShopperName?
  public var emailAddress: Swift.String?
  @available(*, deprecated, renamed: "phoneNumber")
  public var telephoneNumber: Swift.String?
  public var phoneNumber: Adyen.PhoneNumber?
  public var billingAddress: Adyen.PostalAddress?
  public var deliveryAddress: Adyen.PostalAddress?
  public var socialSecurityNumber: Swift.String?
  public var card: Adyen.PrefilledShopperInformation.CardInformation?
  @available(*, deprecated, renamed: "init(shopperName:emailAddress:phoneNumber:billingAddress:deliveryAddress:socialSecurityNumber:card:)")
  public init(shopperName: Adyen.ShopperName? = nil, emailAddress: Swift.String? = nil, telephoneNumber: Swift.String? = nil, billingAddress: Adyen.PostalAddress? = nil, deliveryAddress: Adyen.PostalAddress? = nil, socialSecurityNumber: Swift.String? = nil, card: Adyen.PrefilledShopperInformation.CardInformation? = nil)
  public init(shopperName: Adyen.ShopperName? = nil, emailAddress: Swift.String? = nil, phoneNumber: Adyen.PhoneNumber? = nil, billingAddress: Adyen.PostalAddress? = nil, deliveryAddress: Adyen.PostalAddress? = nil, socialSecurityNumber: Swift.String? = nil, card: Adyen.PrefilledShopperInformation.CardInformation? = nil)
}
extension Adyen.PrefilledShopperInformation {
  public struct CardInformation {
    public let holderName: Swift.String
    public init(holderName: Swift.String)
  }
}
public protocol Localizable {
  var localizationParameters: Adyen.LocalizationParameters? { get set }
}
public protocol Cancellable : AnyObject {
  func didCancel()
}
@_spi(AdyenInternal) public protocol AnyNavigationBar : UIKit.UIView {
  @_spi(AdyenInternal) var onCancelHandler: (() -> Swift.Void)? { get set }
}
@_spi(AdyenInternal) public enum NavigationBarType {
  @_spi(AdyenInternal) case regular
  @_spi(AdyenInternal) case custom(any Adyen.AnyNavigationBar)
}
public protocol PresentableComponent : Adyen.Component {
  var requiresModalPresentation: Swift.Bool { get }
  var viewController: UIKit.UIViewController { get }
  @_spi(AdyenInternal) var navBarType: Adyen.NavigationBarType { get }
}
extension Adyen.PresentableComponent {
  @_spi(AdyenInternal) public var requiresModalPresentation: Swift.Bool {
    get
  }
  @_spi(AdyenInternal) public var navBarType: Adyen.NavigationBarType {
    get
  }
}
@_spi(AdyenInternal) final public class PresentableComponentWrapper : Adyen.PresentableComponent, Adyen.Cancellable, Adyen.FinalizableComponent, Adyen.LoadingComponent {
  @_spi(AdyenInternal) final public var apiContext: Adyen.APIContext {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public var context: Adyen.AdyenContext {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) final public let viewController: UIKit.UIViewController
  @_spi(AdyenInternal) final public let component: any Adyen.Component
  @_spi(AdyenInternal) final public var requiresModalPresentation: Swift.Bool
  @_spi(AdyenInternal) final public var navBarType: Adyen.NavigationBarType
  @_spi(AdyenInternal) public init(component: any Adyen.Component, viewController: UIKit.UIViewController, navBarType: Adyen.NavigationBarType = .regular)
  @_spi(AdyenInternal) final public func didCancel()
  @_spi(AdyenInternal) final public func didFinalize(with success: Swift.Bool, completion: (() -> Swift.Void)?)
  @_spi(AdyenInternal) final public func stopLoading()
  @_spi(AdyenInternal) @objc deinit
}
public protocol PresentationDelegate : AnyObject {
  func present(component: any Adyen.PresentableComponent)
}
public struct ProgressViewStyle : Adyen.ViewStyle {
  public let progressTintColor: UIKit.UIColor
  public let trackTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(progressTintColor: UIKit.UIColor, trackTintColor: UIKit.UIColor)
}
@_spi(AdyenInternal) public protocol PublicKeyConsumer {
  @_spi(AdyenInternal) var publicKeyProvider: any Adyen.AnyPublicKeyProvider { get }
}
@_spi(AdyenInternal) extension Adyen.PublicKeyConsumer where Self : Adyen.PaymentComponent {
  @_spi(AdyenInternal) public typealias PublicKeySuccessHandler = (_ publicKey: Swift.String) -> Swift.Void
  @_spi(AdyenInternal) public func fetchCardPublicKey(notifyingDelegateOnFailure: Swift.Bool, successHandler: Self.PublicKeySuccessHandler? = nil)
}
@_spi(AdyenInternal) public protocol AnyPublicKeyProvider : AnyObject {
  @_spi(AdyenInternal) typealias CompletionHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  @_spi(AdyenInternal) func fetch(completion: @escaping Self.CompletionHandler)
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers final public class PublicKeyProvider : Adyen.AnyPublicKeyProvider {
  @_spi(AdyenInternal) convenience public init(apiContext: Adyen.APIContext)
  @_spi(AdyenInternal) final public func fetch(completion: @escaping Adyen.PublicKeyProvider.CompletionHandler)
  @_spi(AdyenInternal) public enum Error : Swift.Error, Foundation.LocalizedError {
    @_spi(AdyenInternal) case invalidClientKey
    @_spi(AdyenInternal) public var errorDescription: Swift.String? {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public static func == (a: Adyen.PublicKeyProvider.Error, b: Adyen.PublicKeyProvider.Error) -> Swift.Bool
    @_spi(AdyenInternal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(AdyenInternal) public var hashValue: Swift.Int {
      @_spi(AdyenInternal) get
    }
  }
  @_spi(AdyenInternal) @objc deinit
}
final public class QiwiWalletComponent : Adyen.AbstractPersonalInformationComponent {
  public typealias Configuration = Adyen.PersonalInformationConfiguration
  public init(paymentMethod: Adyen.QiwiWalletPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.QiwiWalletComponent.Configuration = .init())
  @_spi(AdyenInternal) override final public func submitButtonTitle() -> Swift.String
  @_spi(AdyenInternal) override final public func phoneExtensions() -> [Adyen.PhoneExtension]
  @_spi(AdyenInternal) override final public func createPaymentDetails() throws -> any Adyen.PaymentMethodDetails
  @objc deinit
}
public struct QiwiWalletDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let phonePrefix: Swift.String
  public let phoneNumber: Swift.String
  public init(paymentMethod: any Adyen.PaymentMethod, phonePrefix: Swift.String, phoneNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct QiwiWalletPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let phoneExtensions: [Adyen.PhoneExtension]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
}
public struct PhoneExtension : Swift.Codable, Swift.Equatable {
  public let value: Swift.String
  public let countryCode: Swift.String
  public var countryDisplayName: Swift.String {
    get
  }
  public init(value: Swift.String, countryCode: Swift.String)
  public static func == (a: Adyen.PhoneExtension, b: Adyen.PhoneExtension) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum QRCodePaymentMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pix
  case promptPay
  case duitNow
  case payNow
  case upiQRCode
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Adyen.QRCodePaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [Adyen.QRCodePaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct QRCodeAction : Swift.Decodable {
  public let paymentMethodType: Adyen.QRCodePaymentMethod
  public let qrCodeData: Swift.String
  public let paymentData: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class QRCodeActionComponent : Adyen.ActionComponent, Adyen.Cancellable {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  public struct Configuration {
    public var style: Adyen.QRCodeComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(style: Adyen.QRCodeComponentStyle = QRCodeComponentStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
  }
  final public var configuration: Adyen.QRCodeActionComponent.Configuration
  convenience public init(context: Adyen.AdyenContext, configuration: Adyen.QRCodeActionComponent.Configuration = .init())
  final public func handle(_ action: Adyen.QRCodeAction)
  final public func didCancel()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.QRCodeActionComponent : Adyen.ActionComponentDelegate {
  @_spi(AdyenInternal) final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didComplete(from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
}
public struct QRCodeComponentStyle : Adyen.ViewStyle {
  public var copyCodeButton: Adyen.ButtonStyle
  public var saveAsImageButton: Adyen.ButtonStyle
  public var instructionLabel: Adyen.TextStyle
  public var amountToPayLabel: Adyen.TextStyle
  public var progressView: Adyen.ProgressViewStyle
  public var expirationLabel: Adyen.TextStyle
  public var logoCornerRounding: Adyen.CornerRounding
  public var backgroundColor: UIKit.UIColor
  public init()
}
public protocol ReadyToSubmitPaymentComponentDelegate : AnyObject {
  func showConfirmation(for component: Adyen.InstantPaymentComponent, with order: Adyen.PartialPaymentOrder?)
}
public struct RedirectableAwaitAction : Swift.Decodable {
  public let paymentMethodType: Adyen.AwaitPaymentMethod
  public let paymentData: Swift.String
  public let url: Foundation.URL
  public init(paymentData: Swift.String, paymentMethodType: Adyen.AwaitPaymentMethod, url: Foundation.URL)
  public init(from decoder: any Swift.Decoder) throws
}
public struct RedirectAction : Swift.Decodable {
  public let url: Foundation.URL
  public let paymentData: Swift.String?
  public let nativeRedirectData: Swift.String?
  public init(url: Foundation.URL, paymentData: Swift.String?, nativeRedirectData: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
}
final public class RedirectComponent : Adyen.ActionComponent {
  public enum Error : Foundation.LocalizedError {
    case appNotFound
    case invalidRedirectParameters
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.RedirectComponent.Error, b: Adyen.RedirectComponent.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Configuration {
    public var style: Adyen.RedirectComponentStyle?
    public init(style: Adyen.RedirectComponentStyle? = nil)
  }
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  final public var configuration: Adyen.RedirectComponent.Configuration
  public init(context: Adyen.AdyenContext, configuration: Adyen.RedirectComponent.Configuration = Configuration())
  final public func handle(_ action: Adyen.RedirectAction)
  @discardableResult
  public static func applicationDidOpen(from url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.RedirectComponent : Adyen.ActionComponentDelegate {
  @_spi(AdyenInternal) final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didComplete(from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
  @_spi(AdyenInternal) final public func didOpenExternalApplication(component: any Adyen.ActionComponent)
}
public struct RedirectComponentStyle {
  public let preferredBarTintColor: UIKit.UIColor?
  public let preferredControlTintColor: UIKit.UIColor
  public let modalPresentationStyle: UIKit.UIModalPresentationStyle
  public init(preferredBarTintColor: UIKit.UIColor? = nil, preferredControlTintColor: UIKit.UIColor = .systemBlue, modalPresentationStyle: UIKit.UIModalPresentationStyle = .formSheet)
}
public struct RedirectDetails : Adyen.AdditionalDetails, Swift.Decodable {
  public enum Error : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: Adyen.RedirectDetails.Error, b: Adyen.RedirectDetails.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var payload: Swift.String? {
    get
  }
  public var redirectResult: Swift.String? {
    get
  }
  public var paymentResponse: Swift.String? {
    get
  }
  public var merchantData: Swift.String? {
    get
  }
  public var queryString: Swift.String? {
    get
  }
  public init(returnURL: Foundation.URL) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public typealias URLHandler = (Foundation.URL) throws -> Swift.Void
@_spi(AdyenInternal) public enum RedirectListener {
  @_spi(AdyenInternal) public static func registerForURL(using handler: @escaping Adyen.URLHandler)
}
@_spi(AdyenInternal) public class RegularExpressionValidator : Adyen.LengthValidator {
  @_spi(AdyenInternal) public init(regularExpression: Swift.String, minimumLength: Swift.Int? = nil, maximumLength: Swift.Int? = nil)
  @_spi(AdyenInternal) override public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) override public func maximumLength(for value: Swift.String) -> Swift.Int
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Swift.Result {
  @_spi(AdyenInternal) public func handle(success: (Success) -> Swift.Void, failure: (Failure) -> Swift.Void)
}
public enum SDKAction : Swift.Decodable {
  case weChatPay(Adyen.WeChatPaySDKAction)
  case twint(Adyen.TwintSDKAction)
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public protocol SearchResultsEmptyView : UIKit.UIView {
  @_spi(AdyenInternal) var searchTerm: Swift.String { get set }
}
@_spi(AdyenInternal) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SearchViewController : UIKit.UIViewController, Adyen.AdyenObserver {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) weak public var delegate: (any Adyen.ViewControllerDelegate)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public var resultsListViewController: Adyen.ListViewController {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(viewModel: Adyen.SearchViewController.ViewModel, emptyView: any Adyen.SearchResultsEmptyView)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredContentSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.SearchViewController : UIKit.UISearchBarDelegate {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
}
@_spi(AdyenInternal) extension Adyen.SearchViewController {
  @_spi(AdyenInternal) public struct ViewModel {
    @_spi(AdyenInternal) public typealias ResultProvider = (_ searchTerm: Swift.String, _ handler: @escaping ([Adyen.ListItem]) -> Swift.Void) -> Swift.Void
    @_spi(AdyenInternal) public init(localizationParameters: Adyen.LocalizationParameters? = nil, style: any Adyen.ViewStyle, searchBarPlaceholder: Swift.String? = nil, shouldFocusSearchBarOnAppearance: Swift.Bool = false, resultProvider: @escaping Adyen.SearchViewController.ViewModel.ResultProvider)
  }
}
@_spi(AdyenInternal) @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecuredViewController<ChildViewController> : UIKit.UIViewController where ChildViewController : UIKit.UIViewController {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) weak final public var delegate: (any Adyen.ViewControllerDelegate)?
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var preferredContentSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var title: Swift.String? {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(child: ChildViewController, style: any Adyen.ViewStyle)
  @_spi(AdyenInternal) @objc deinit
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
}
public struct SegmentedControlStyle : Adyen.TintableStyle {
  public var textStyle: Adyen.TextStyle
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor?
  public init(textStyle: Adyen.TextStyle, backgroundColor: UIKit.UIColor = .clear, tintColor: UIKit.UIColor = .white)
}
@_spi(AdyenInternal) public class SelectableFormItem : Adyen.FormItem {
  @_spi(AdyenInternal) public var subitems: [any Adyen.FormItem]
  @_spi(AdyenInternal) public var title: Swift.String
  @_spi(AdyenInternal) public var imageUrl: Foundation.URL?
  @_spi(AdyenInternal) @Adyen.AdyenObservable @_projectedValueProperty($isSelected) public var isSelected: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
    @_spi(AdyenInternal) _modify
  }
  @_spi(AdyenInternal) public var $isSelected: Adyen.AdyenObservable<Swift.Bool> {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var selectionHandler: (() -> Swift.Void)?
  @_spi(AdyenInternal) public var identifier: Swift.String?
  @_spi(AdyenInternal) final public let accessibilityLabel: Swift.String
  @_spi(AdyenInternal) final public let style: Adyen.SelectableFormItemStyle
  @_spi(AdyenInternal) public var isHidden: Adyen.AdyenObservable<Swift.Bool>
  @_spi(AdyenInternal) public init(title: Swift.String, imageUrl: Foundation.URL? = nil, isSelected: Swift.Bool = false, style: Adyen.SelectableFormItemStyle, identifier: Swift.String? = nil, accessibilityLabel: Swift.String? = nil, selectionHandler: (() -> Swift.Void)? = nil)
  @_spi(AdyenInternal) public func build(with builder: Adyen.FormItemViewBuilder) -> any Adyen.AnyFormItemView
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public struct SelectableFormItemStyle : Adyen.ViewStyle {
  @_spi(AdyenInternal) public var title: Adyen.TextStyle
  @_spi(AdyenInternal) public var imageStyle: Adyen.ImageStyle
  @_spi(AdyenInternal) public var backgroundColor: UIKit.UIColor {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) public init(title: Adyen.TextStyle)
}
@_spi(AdyenInternal) extension Adyen.SelectableFormItemStyle : Swift.Equatable {
  @_spi(AdyenInternal) public static func == (lhs: Adyen.SelectableFormItemStyle, rhs: Adyen.SelectableFormItemStyle) -> Swift.Bool
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SelectableFormItemView : Adyen.FormItemView<Adyen.SelectableFormItem> {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) required public init(item: Adyen.SelectableFormItem)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToWindow()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_spi(AdyenInternal) @objc deinit
}
final public class SEPADirectDebitComponent : Adyen.PaymentComponent, Adyen.PaymentAware, Adyen.PresentableComponent, Adyen.LoadingComponent {
  public typealias Configuration = Adyen.BasicComponentConfiguration
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  final public var configuration: Adyen.SEPADirectDebitComponent.Configuration
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  public init(paymentMethod: Adyen.SEPADirectDebitPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.SEPADirectDebitComponent.Configuration = .init())
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public var requiresModalPresentation: Swift.Bool
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.SEPADirectDebitComponent : Adyen.TrackableComponent {
}
@_spi(AdyenInternal) extension Adyen.SEPADirectDebitComponent : Adyen.ViewControllerDelegate {
}
public struct SEPADirectDebitDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Adyen.PaymentMethodType
  public let iban: Swift.String
  public let ownerName: Swift.String
  public init(paymentMethod: Adyen.SEPADirectDebitPaymentMethod, iban: Swift.String, ownerName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct SEPADirectDebitPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ShopperInformation {
  var shopperName: Adyen.ShopperName? { get }
  var emailAddress: Swift.String? { get }
  var telephoneNumber: Swift.String? { get }
  var billingAddress: Adyen.PostalAddress? { get }
  var deliveryAddress: Adyen.PostalAddress? { get }
  var socialSecurityNumber: Swift.String? { get }
}
@_spi(AdyenInternal) extension Adyen.ShopperInformation {
  @_spi(AdyenInternal) public var shopperName: Adyen.ShopperName? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var emailAddress: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var telephoneNumber: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var billingAddress: Adyen.PostalAddress? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var deliveryAddress: Adyen.PostalAddress? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var socialSecurityNumber: Swift.String? {
    @_spi(AdyenInternal) get
  }
}
public struct ShopperName : Swift.Codable, Swift.Equatable {
  public let firstName: Swift.String
  public let lastName: Swift.String
  public init(firstName: Swift.String, lastName: Swift.String)
  public static func == (a: Adyen.ShopperName, b: Adyen.ShopperName) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShopperInteraction : Swift.String, Swift.Codable {
  case shopperPresent
  case shopperNotPresent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StoredBCMCPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public var name: Swift.String {
    get
  }
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation? {
    get
    set
  }
  public var identifier: Swift.String {
    get
  }
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public var supportedShopperInteractions: [Adyen.ShopperInteraction] {
    get
  }
  public let brand: Swift.String
  public var lastFour: Swift.String {
    get
  }
  public var expiryMonth: Swift.String {
    get
  }
  public var expiryYear: Swift.String {
    get
  }
  public var holderName: Swift.String? {
    get
  }
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct StoredBLIKPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoredCardConfiguration {
  public var showsSecurityCodeField: Swift.Bool
  public init()
}
public struct StoredCashAppPayPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public let cashtag: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoredInstantPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class StoredPaymentMethodComponent : Adyen.PaymentComponent, Adyen.PresentableComponent, Adyen.PaymentAware {
  final public var configuration: Adyen.StoredPaymentMethodComponent.Configuration
  final public let context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  public init(paymentMethod: any Adyen.StoredPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.StoredPaymentMethodComponent.Configuration = .init())
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  @objc deinit
}
extension Adyen.StoredPaymentMethodComponent {
  public struct Configuration : Adyen.AnyBasicComponentConfiguration {
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(localizationParameters: Adyen.LocalizationParameters? = nil)
  }
}
@_spi(AdyenInternal) extension Adyen.StoredPaymentMethodComponent : Adyen.TrackableComponent {
}
public struct StoredPaymentDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public init(paymentMethod: any Adyen.StoredPaymentMethod)
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol StoredPaymentMethodsDelegate : AnyObject {
  func disable(storedPaymentMethod: any Adyen.StoredPaymentMethod, completion: @escaping Adyen.Completion<Swift.Bool>)
}
public struct StoredPayPalPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public let emailAddress: Swift.String
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoredTwintPaymentMethod : Adyen.StoredPaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  public let identifier: Swift.String
  public let supportedShopperInteractions: [Adyen.ShopperInteraction]
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  @_spi(AdyenInternal) public func defaultDisplayInformation(using parameters: Adyen.LocalizationParameters?) -> Adyen.DisplayInformation
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) public protocol StorePaymentMethodFieldAware : Adyen.AdyenSessionAware {
  @_spi(AdyenInternal) var showStorePaymentMethodField: Swift.Bool? { get }
}
@_spi(AdyenInternal) public protocol SessionStoredPaymentMethodsDelegate : Adyen.AdyenSessionAware, Adyen.StoredPaymentMethodsDelegate {
  @_spi(AdyenInternal) var showRemovePaymentMethodButton: Swift.Bool { get }
  @_spi(AdyenInternal) func disable(storedPaymentMethod: any Adyen.StoredPaymentMethod, dropInComponent: any Adyen.AnyDropInComponent, completion: @escaping Adyen.Completion<Swift.Bool>)
}
@_spi(AdyenInternal) extension Swift.String : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public enum Adyen {
    @_spi(AdyenInternal) public static let securedString: Swift.String
  }
  @_spi(AdyenInternal) public typealias AdyenBase = Swift.String
}
@_spi(AdyenInternal) extension Swift.Optional : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = Swift.Optional<Wrapped>
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == Swift.String? {
  @_spi(AdyenInternal) public var isNullOrEmpty: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var nilIfEmpty: Swift.String? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == Swift.String {
  @_spi(AdyenInternal) public var nilIfEmpty: Swift.String? {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public func truncate(to length: Swift.Int) -> Swift.String
  @_spi(AdyenInternal) public func components(withLengths lengths: [Swift.Int]) -> [Swift.String]
  @_spi(AdyenInternal) public func components(withLength length: Swift.Int) -> [Swift.String]
  @_spi(AdyenInternal) public subscript(position: Swift.Int) -> Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public subscript(range: Swift.Range<Swift.Int>) -> Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public subscript(range: Swift.ClosedRange<Swift.Int>) -> Swift.String {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var linkRanges: [Foundation.NSRange] {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) @objc @_Concurrency.MainActor(unsafe) final public class SubmitButton : UIKit.UIControl {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public init(style: Adyen.ButtonStyle)
  @_spi(AdyenInternal) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var showsActivityIndicator: Swift.Bool {
    @_spi(AdyenInternal) get
    @_spi(AdyenInternal) set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var isHighlighted: Swift.Bool {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @_inheritsConvenienceInitializers @objc(AdyTextField) @_Concurrency.MainActor(unsafe) final public class TextField : UIKit.UITextField {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public var allowsEditingActions: Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityValue: Swift.String? {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public var font: UIKit.UIFont? {
    @_spi(AdyenInternal) @objc get
    @_spi(AdyenInternal) @objc set
  }
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override final public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.TextField {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) final public func apply(placeholderText: Swift.String?, with style: Adyen.TextStyle?)
}
public struct TextStyle : Adyen.ViewStyle {
  public var font: UIKit.UIFont
  public var color: UIKit.UIColor
  public var disabledColor: UIKit.UIColor
  public var textAlignment: UIKit.NSTextAlignment
  public var backgroundColor: UIKit.UIColor
  public var cornerRounding: Adyen.CornerRounding
  public init(font: UIKit.UIFont, color: UIKit.UIColor, disabledColor: UIKit.UIColor = UIColor.Adyen.componentSecondaryLabel, textAlignment: UIKit.NSTextAlignment, cornerRounding: Adyen.CornerRounding = .none, backgroundColor: UIKit.UIColor = .clear)
  public init(font: UIKit.UIFont, color: UIKit.UIColor)
}
extension Adyen.TextStyle : Swift.Equatable {
  public static func == (lhs: Adyen.TextStyle, rhs: Adyen.TextStyle) -> Swift.Bool
  public var stringAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
}
public enum ThreeDS2Action : Swift.Decodable {
  case fingerprint(Adyen.ThreeDS2FingerprintAction)
  case challenge(Adyen.ThreeDS2ChallengeAction)
  public init(from decoder: any Swift.Decoder) throws
  public enum ActionType : Swift.String, Swift.Decodable {
    case fingerprint
    case challenge
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ThreeDS2ChallengeAction : Swift.Decodable {
  public let challengeToken: Swift.String
  public let authorisationToken: Swift.String?
  public let paymentData: Swift.String?
  public init(challengeToken: Swift.String, authorisationToken: Swift.String? = nil, paymentData: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
final public class ThreeDS2Component : Adyen.ActionComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)? {
    get
    set
  }
  final public var configuration: Adyen.ThreeDS2Component.Configuration {
    get
    set
  }
  public struct Configuration {
    public var redirectComponentStyle: Adyen.RedirectComponentStyle?
    public var appearanceConfiguration: Adyen3DS2.ADYAppearanceConfiguration
    public var requestorAppURL: Foundation.URL?
    public let delegateAuthentication: Adyen.ThreeDS2Component.Configuration.DelegatedAuthentication?
    public struct DelegatedAuthentication {
      public let relyingPartyIdentifier: Swift.String
      public let delegatedAuthenticationComponentStyle: Adyen.DelegatedAuthenticationComponentStyle
      public let localizationParameters: Adyen.LocalizationParameters?
      public init(relyingPartyIdentifier: Swift.String, delegatedAuthenticationComponentStyle: Adyen.DelegatedAuthenticationComponentStyle = .init(), localizationParameters: Adyen.LocalizationParameters? = nil)
    }
    public init(redirectComponentStyle: Adyen.RedirectComponentStyle? = nil, appearanceConfiguration: Adyen3DS2.ADYAppearanceConfiguration = ADYAppearanceConfiguration(), requestorAppURL: Foundation.URL? = nil, delegateAuthentication: Adyen.ThreeDS2Component.Configuration.DelegatedAuthentication? = nil)
  }
  public init(context: Adyen.AdyenContext, configuration: Adyen.ThreeDS2Component.Configuration = Configuration())
  final public func handle(_ threeDS2Action: Adyen.ThreeDS2Action)
  final public func handle(_ fingerprintAction: Adyen.ThreeDS2FingerprintAction)
  final public func handle(_ challengeAction: Adyen.ThreeDS2ChallengeAction)
  @objc deinit
}
extension Adyen.ThreeDS2Component : Adyen.ActionComponentDelegate {
  final public func didOpenExternalApplication(component: any Adyen.ActionComponent)
  final public func didProvide(_ data: Adyen.ActionComponentData, from component: any Adyen.ActionComponent)
  final public func didComplete(from component: any Adyen.ActionComponent)
  final public func didFail(with error: any Swift.Error, from component: any Adyen.ActionComponent)
}
extension Adyen.ThreeDS2Component {
  public enum Error : Swift.Error {
    case missingTransaction
    case unexpectedAction
    public static func == (a: Adyen.ThreeDS2Component.Error, b: Adyen.ThreeDS2Component.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum ThreeDS2Details : Adyen.AdditionalDetails {
  case fingerprint(Swift.String)
  case challengeResult(Adyen.ThreeDSResult)
  case completed(Adyen.ThreeDSResult)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ThreeDS2FingerprintAction : Swift.Decodable {
  public let fingerprintToken: Swift.String
  public let authorisationToken: Swift.String?
  public let paymentData: Swift.String?
  public init(fingerprintToken: Swift.String, authorisationToken: Swift.String? = nil, paymentData: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
public let threeDS2SdkVersion: Swift.String
public struct ThreeDSResult : Swift.Decodable {
  public let payload: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) final public class Throttler {
  @_spi(AdyenInternal) public init(minimumDelay: Foundation.TimeInterval, queue: Dispatch.DispatchQueue = DispatchQueue.main)
  @_spi(AdyenInternal) final public func throttle(_ block: @escaping () -> Swift.Void)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Swift.Double : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = Swift.Double
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == Swift.Double {
  @_spi(AdyenInternal) public func timeLeftString() -> Swift.String?
}
@_spi(AdyenInternal) public protocol TrackableComponent {
  @_spi(AdyenInternal) var analyticsFlavor: Adyen.AnalyticsFlavor { get }
  @_spi(AdyenInternal) func sendInitialAnalytics()
  @_spi(AdyenInternal) func sendDidLoadEvent()
}
@_spi(AdyenInternal) extension Adyen.TrackableComponent where Self : Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) public func viewDidLoad(viewController: UIKit.UIViewController)
}
@_spi(AdyenInternal) extension Adyen.TrackableComponent where Self : Adyen.Component {
  @_spi(AdyenInternal) public func sendInitialAnalytics()
}
@_spi(AdyenInternal) extension Adyen.TrackableComponent where Self : Adyen.Component, Self : Adyen.PaymentMethodAware {
  @_spi(AdyenInternal) public var analyticsFlavor: Adyen.AnalyticsFlavor {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public func sendDidLoadEvent()
}
public struct TwintPaymentMethod : Adyen.PaymentMethod {
  public var type: Adyen.PaymentMethodType
  public var name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class TwintSDKAction : Swift.Decodable {
  final public let sdkData: Adyen.TwintSDKData
  final public let paymentData: Swift.String
  final public let paymentMethodType: Swift.String
  final public let type: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct TwintSDKData : Swift.Decodable {
  public let token: Swift.String
  public let isStored: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIApplication {
  @_spi(AdyenInternal) public var mainKeyWindow: UIKit.UIWindow? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension UIKit.UIButton {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) convenience public init(style: Adyen.ButtonStyle)
}
@_spi(AdyenInternal) extension UIKit.UIFont : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = UIKit.UIFont
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIFont {
  @_spi(AdyenInternal) public func font(with weight: UIKit.UIFont.Weight) -> UIKit.UIFont
}
@_spi(AdyenInternal) extension UIKit.UIImageView {
  @_spi(AdyenInternal) @discardableResult
  @_Concurrency.MainActor(unsafe) public func load(url: Foundation.URL, using imageLoader: any Adyen.ImageLoading, placeholder: UIKit.UIImage? = nil) -> any Adyen.AdyenCancellable
}
@_spi(AdyenInternal) extension UIKit.UIImageView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) convenience public init(style: Adyen.ImageStyle)
}
@_spi(AdyenInternal) extension UIKit.UILabel {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) convenience public init(style: Adyen.TextStyle)
}
@_spi(AdyenInternal) extension UIKit.UIProgressView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) convenience public init(style: Adyen.ProgressViewStyle)
}
@_spi(AdyenInternal) extension UIKit.UISearchBar {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public static func prominent(placeholder: Swift.String?, backgroundColor: UIKit.UIColor, delegate: any UIKit.UISearchBarDelegate) -> UIKit.UISearchBar
}
@_spi(AdyenInternal) extension UIKit.UIView {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func accessibilityMarkAsSelected(_ selected: Swift.Bool)
}
@_spi(AdyenInternal) @objc public class AnimationContext : ObjectiveC.NSObject {
  @_spi(AdyenInternal) public init(animationKey: Swift.String, duration: Foundation.TimeInterval, delay: Foundation.TimeInterval = 0, options: UIKit.UIView.AnimationOptions = [], animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @objc final public class KeyFrameAnimationContext : Adyen.AnimationContext {
  @_spi(AdyenInternal) public init(animationKey: Swift.String, duration: Foundation.TimeInterval, delay: Foundation.TimeInterval = 0, options: UIKit.UIView.KeyframeAnimationOptions = [], animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) @objc final public class SpringAnimationContext : Adyen.AnimationContext {
  @_spi(AdyenInternal) public init(animationKey: Swift.String, duration: Foundation.TimeInterval, delay: Foundation.TimeInterval = 0, dampingRatio: CoreFoundation.CGFloat, velocity: CoreFoundation.CGFloat, options: UIKit.UIView.AnimationOptions = [], animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIView {
  @_spi(AdyenInternal) public func cancelAnimations(with key: Swift.String)
  @_spi(AdyenInternal) public func animate(context: Adyen.AnimationContext)
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIView {
  @_spi(AdyenInternal) @discardableResult
  public func anchor(inside view: UIKit.UIView, with padding: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @_spi(AdyenInternal) @discardableResult
  public func anchor(inside margins: UIKit.UILayoutGuide, with padding: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @_spi(AdyenInternal) @discardableResult
  public func anchor(inside anchorSource: Adyen.AdyenScope<Base>.LayoutAnchorSource, edgeInsets: Adyen.AdyenScope<Base>.EdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @_spi(AdyenInternal) public func wrapped(with insets: UIKit.UIEdgeInsets = .zero) -> UIKit.UIView
  @_spi(AdyenInternal) public enum LayoutAnchorSource {
    @_spi(AdyenInternal) case view(UIKit.UIView)
    @_spi(AdyenInternal) case layoutGuide(UIKit.UILayoutGuide)
  }
  @_spi(AdyenInternal) public struct EdgeInsets {
    @_spi(AdyenInternal) public var top: CoreFoundation.CGFloat?
    @_spi(AdyenInternal) public var left: CoreFoundation.CGFloat?
    @_spi(AdyenInternal) public var bottom: CoreFoundation.CGFloat?
    @_spi(AdyenInternal) public var right: CoreFoundation.CGFloat?
    @_spi(AdyenInternal) public static var zero: Adyen.AdyenScope<Base>.EdgeInsets {
      @_spi(AdyenInternal) get
    }
    @_spi(AdyenInternal) public init(top: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil)
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIViewController {
  @_spi(AdyenInternal) public var topPresenter: UIKit.UIViewController {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension UIKit.UIResponder : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = UIKit.UIResponder
}
@_spi(AdyenInternal) public protocol PreferredContentSizeConsumer {
  @_spi(AdyenInternal) func didUpdatePreferredContentSize()
  @_spi(AdyenInternal) func willUpdatePreferredContentSize()
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIView {
  @_spi(AdyenInternal) @discardableResult
  public func snapshot(forceRedraw: Swift.Bool = false) -> UIKit.UIImage?
  @_spi(AdyenInternal) public func hide(animationKey: Swift.String, hidden: Swift.Bool, animated: Swift.Bool)
  @_spi(AdyenInternal) public var minimalSize: CoreFoundation.CGSize {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base : UIKit.UIView {
  @_spi(AdyenInternal) public func round(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_spi(AdyenInternal) public func round(corners: UIKit.UIRectCorner, percentage: CoreFoundation.CGFloat)
  @_spi(AdyenInternal) public func round(corners: UIKit.UIRectCorner, rounding: Adyen.CornerRounding)
  @_spi(AdyenInternal) public func round(using rounding: Adyen.CornerRounding)
}
@_spi(AdyenInternal) public struct UnknownError : Swift.Error, Foundation.LocalizedError {
  @_spi(AdyenInternal) public var errorDescription: Swift.String?
  @_spi(AdyenInternal) public init(errorDescription: Swift.String? = nil)
}
final public class UPIComponent : Adyen.PaymentComponent, Adyen.PresentableComponent, Adyen.PaymentAware, Adyen.LoadingComponent {
  public typealias Configuration = Adyen.BasicComponentConfiguration
  @_spi(AdyenInternal) final public var context: Adyen.AdyenContext
  final public var paymentMethod: any Adyen.PaymentMethod {
    get
  }
  weak final public var delegate: (any Adyen.PaymentComponentDelegate)?
  final public var viewController: UIKit.UIViewController {
    get
    set
  }
  final public var requiresModalPresentation: Swift.Bool
  final public var configuration: Adyen.UPIComponent.Configuration
  public init(paymentMethod: Adyen.UPIPaymentMethod, context: Adyen.AdyenContext, configuration: Adyen.UPIComponent.Configuration = .init())
  final public func stopLoading()
  @objc deinit
}
@_spi(AdyenInternal) extension Adyen.UPIComponent : Adyen.AdyenObserver {
}
public struct UPIComponentDetails : Adyen.PaymentMethodDetails {
  @_spi(AdyenInternal) public var checkoutAttemptId: Swift.String?
  public let type: Swift.String
  public let virtualPaymentAddress: Swift.String?
  public let appId: Swift.String?
  public init(type: Swift.String, virtualPaymentAddress: Swift.String? = nil, appId: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UPIPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public let apps: [Adyen.Issuer]?
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) extension Foundation.URL : Adyen.AdyenCompatible {
  @_spi(AdyenInternal) public typealias AdyenBase = Foundation.URL
}
@_spi(AdyenInternal) extension Adyen.AdyenScope where Base == Foundation.URL {
  @_spi(AdyenInternal) public var queryParameters: [Swift.String : Swift.String] {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var isHttp: Swift.Bool {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public enum ValidationStatus {
  @_spi(AdyenInternal) case valid
  @_spi(AdyenInternal) case invalid(any Adyen.ValidationError)
  @_spi(AdyenInternal) public var isValid: Swift.Bool {
    @_spi(AdyenInternal) get
  }
  @_spi(AdyenInternal) public var validationError: (any Adyen.ValidationError)? {
    @_spi(AdyenInternal) get
  }
}
@_spi(AdyenInternal) public protocol ValidationError : Foundation.LocalizedError {
}
public protocol Validator {
  func isValid(_ value: Swift.String) -> Swift.Bool
  func maximumLength(for value: Swift.String) -> Swift.Int
}
@_spi(AdyenInternal) public protocol StatusValidator : Adyen.Validator {
  @_spi(AdyenInternal) func validate(_ value: Swift.String) -> Adyen.ValidationStatus
}
@_spi(AdyenInternal) public func || (lhs: any Adyen.Validator, rhs: any Adyen.Validator) -> any Adyen.Validator
@_spi(AdyenInternal) public func && (lhs: any Adyen.Validator, rhs: any Adyen.Validator) -> any Adyen.Validator
public protocol CombinedValidator : Adyen.Validator {
  var firstValidator: any Adyen.Validator { get }
  var secondValidator: any Adyen.Validator { get }
}
extension Adyen.CombinedValidator {
  public func maximumLength(for value: Swift.String) -> Swift.Int
}
@_spi(AdyenInternal) final public class ORValidator : Adyen.CombinedValidator {
  @_spi(AdyenInternal) final public let firstValidator: any Adyen.Validator
  @_spi(AdyenInternal) final public let secondValidator: any Adyen.Validator
  @_spi(AdyenInternal) public init(firstValidator: any Adyen.Validator, secondValidator: any Adyen.Validator)
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) final public class ANDValidator : Adyen.CombinedValidator {
  @_spi(AdyenInternal) final public let firstValidator: any Adyen.Validator
  @_spi(AdyenInternal) final public let secondValidator: any Adyen.Validator
  @_spi(AdyenInternal) public init(firstValidator: any Adyen.Validator, secondValidator: any Adyen.Validator)
  @_spi(AdyenInternal) final public func isValid(_ value: Swift.String) -> Swift.Bool
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public protocol ViewControllerDelegate : AnyObject {
  @_spi(AdyenInternal) func viewDidLoad(viewController: UIKit.UIViewController)
  @_spi(AdyenInternal) func viewDidAppear(viewController: UIKit.UIViewController)
  @_spi(AdyenInternal) func viewWillAppear(viewController: UIKit.UIViewController)
}
@_spi(AdyenInternal) extension Adyen.ViewControllerDelegate {
  @_spi(AdyenInternal) public func viewDidLoad(viewController: UIKit.UIViewController)
  @_spi(AdyenInternal) public func viewDidAppear(viewController: UIKit.UIViewController)
  @_spi(AdyenInternal) public func viewWillAppear(viewController: UIKit.UIViewController)
}
@_spi(AdyenInternal) public protocol ViewControllerPresenter : AnyObject {
  @_spi(AdyenInternal) func presentViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_spi(AdyenInternal) func dismissViewController(animated: Swift.Bool)
}
@_spi(AdyenInternal) extension UIKit.UIViewController : Adyen.ViewControllerPresenter {
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func presentViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_spi(AdyenInternal) @_Concurrency.MainActor(unsafe) public func dismissViewController(animated: Swift.Bool)
}
@_spi(AdyenInternal) public class WeakReferenceViewControllerPresenter : Adyen.ViewControllerPresenter {
  @_spi(AdyenInternal) public init(_ presenter: any Adyen.ViewControllerPresenter)
  @_spi(AdyenInternal) public func presentViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_spi(AdyenInternal) public func dismissViewController(animated: Swift.Bool)
  @_spi(AdyenInternal) @objc deinit
}
@_spi(AdyenInternal) public enum ViewIdentifierBuilder {
  @_spi(AdyenInternal) public static func build(scopeInstance: Any, postfix: Swift.String) -> Swift.String
}
public protocol ViewStyle {
  var backgroundColor: UIKit.UIColor { get set }
}
public protocol TintableStyle : Adyen.ViewStyle {
  var tintColor: UIKit.UIColor? { get set }
}
public enum VoucherPaymentMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case dokuIndomaret
  case dokuAlfamart
  case econtextStores
  case econtextATM
  case boletoBancairoSantander
  case oxxo
  case multibanco
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Adyen.VoucherPaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [Adyen.VoucherPaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum VoucherAction : Swift.Decodable {
  case dokuIndomaret(Adyen.DokuVoucherAction)
  case dokuAlfamart(Adyen.DokuVoucherAction)
  case econtextStores(Adyen.EContextStoresVoucherAction)
  case econtextATM(Adyen.EContextATMVoucherAction)
  case boletoBancairoSantander(Adyen.BoletoVoucherAction)
  case oxxo(Adyen.OXXOVoucherAction)
  case multibanco(Adyen.MultibancoVoucherAction)
  public init(from decoder: any Swift.Decoder) throws
  @_spi(AdyenInternal) public var anyAction: any Adyen.AnyVoucherAction {
    get
  }
}
@_hasMissingDesignatedInitializers public class GenericVoucherAction : Swift.Decodable, Adyen.AnyVoucherAction {
  final public let paymentMethodType: Adyen.VoucherPaymentMethod
  final public let initialAmount: Adyen.Amount
  final public let totalAmount: Adyen.Amount
  final public let reference: Swift.String
  final public let expiresAt: Foundation.Date
  final public let merchantName: Swift.String
  @_spi(AdyenInternal) final public let passCreationToken: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class VoucherComponent {
  @_spi(AdyenInternal) final public let context: Adyen.AdyenContext
  weak final public var presentationDelegate: (any Adyen.PresentationDelegate)?
  weak final public var delegate: (any Adyen.ActionComponentDelegate)?
  final public let requiresModalPresentation: Swift.Bool
  public struct Configuration {
    public var style: Adyen.VoucherComponentStyle
    public var localizationParameters: Adyen.LocalizationParameters?
    public init(style: Adyen.VoucherComponentStyle = VoucherComponentStyle(), localizationParameters: Adyen.LocalizationParameters? = nil)
  }
  final public var configuration: Adyen.VoucherComponent.Configuration
  convenience public init(context: Adyen.AdyenContext, configuration: Adyen.VoucherComponent.Configuration = Configuration())
  final public func didCancel()
  final public func handle(_ action: Adyen.VoucherAction)
  @objc deinit
}
public struct VoucherComponentStyle : Adyen.ViewStyle {
  public var amountLabel: Adyen.TextStyle
  public var currencyLabel: Adyen.TextStyle
  public var editButton: Adyen.ButtonStyle
  public var doneButton: Adyen.ButtonStyle
  public var mainButton: Adyen.ButtonStyle
  public var secondaryButton: Adyen.ButtonStyle
  public var codeConfirmationColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init()
}
public struct WeChatPayPaymentMethod : Adyen.PaymentMethod {
  public let type: Adyen.PaymentMethodType
  public let name: Swift.String
  public var merchantProvidedDisplayInformation: Adyen.MerchantCustomDisplayInformation?
  @_spi(AdyenInternal) public func buildComponent(using builder: any Adyen.PaymentComponentBuilder) -> (any Adyen.PaymentComponent)?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class WeChatPaySDKAction : Swift.Decodable {
  final public let sdkData: Adyen.WeChatPaySDKData
  final public let paymentData: Swift.String
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
public struct WeChatPaySDKData : Swift.Decodable {
  public let appIdentifier: Swift.String
  public let partnerIdentifier: Swift.String
  public let prepayIdentifier: Swift.String
  public let timestamp: Swift.String
  public let package: Swift.String
  public let nonce: Swift.String
  public let signature: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(AdyenInternal) extension Adyen.AddressAnalyticsValidationError : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AddressAnalyticsValidationError : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AddressField : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AddressField : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AddressField : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventTarget : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventTarget : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventTarget : Swift.RawRepresentable {}
extension Adyen.SessionPaymentResultCode : Swift.Equatable {}
extension Adyen.SessionPaymentResultCode : Swift.Hashable {}
extension Adyen.SessionPaymentResultCode : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.Analytics.Flavor : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.Analytics.Flavor : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.Analytics.Flavor : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsContext.Platform : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsContext.Platform : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsContext.Platform : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEnvironment : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEnvironment : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEnvironment : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventError.ErrorType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventError.ErrorType : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventError.ErrorType : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventInfo.InfoType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventInfo.InfoType : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventInfo.InfoType : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogType : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogType : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogSubType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogSubType : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AnalyticsEventLog.LogSubType : Swift.RawRepresentable {}
extension Adyen.CardFundingSource : Swift.Equatable {}
extension Adyen.CardFundingSource : Swift.Hashable {}
extension Adyen.CardFundingSource : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.APIErrorType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.APIErrorType : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.APIErrorType : Swift.RawRepresentable {}
extension Adyen.ApplePayComponent.Error : Swift.Equatable {}
extension Adyen.ApplePayComponent.Error : Swift.Hashable {}
extension Adyen.AppleWalletError : Swift.Equatable {}
extension Adyen.AppleWalletError : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.AppleWalletPassRequest.CodingKeys : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.AppleWalletPassRequest.CodingKeys : Swift.Hashable {}
extension Adyen.AwaitPaymentMethod : Swift.Equatable {}
extension Adyen.AwaitPaymentMethod : Swift.Hashable {}
extension Adyen.AwaitPaymentMethod : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.BalanceChecker.Error : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.BalanceChecker.Error : Swift.Hashable {}
extension Adyen.BankDetailsEncryptor.Error : Swift.Equatable {}
extension Adyen.BankDetailsEncryptor.Error : Swift.Hashable {}
extension Adyen.CardComponent.FieldVisibility : Swift.Equatable {}
extension Adyen.CardComponent.FieldVisibility : Swift.Hashable {}
extension Adyen.CardComponent.FieldVisibility : Swift.RawRepresentable {}
extension Adyen.CardEncryptor.Error : Swift.Equatable {}
extension Adyen.CardEncryptor.Error : Swift.Hashable {}
extension Adyen.ClientKeyError : Swift.Equatable {}
extension Adyen.ClientKeyError : Swift.Hashable {}
extension Adyen.ComponentError : Swift.Equatable {}
extension Adyen.ComponentError : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.DateValidator.Format : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.DateValidator.Format : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.DateValidator.Format : Swift.RawRepresentable {}
extension Adyen.DelegatedAuthenticationData.DecodingError : Swift.Equatable {}
extension Adyen.DelegatedAuthenticationData.DecodingError : Swift.Hashable {}
extension Adyen.DocumentPaymentMethod : Swift.Equatable {}
extension Adyen.DocumentPaymentMethod : Swift.Hashable {}
extension Adyen.DocumentPaymentMethod : Swift.RawRepresentable {}
extension Adyen.DropInComponent : Adyen.PresentationDelegate {}
@_spi(AdyenInternal) extension Adyen.FormAddressPickerItem.AddressType : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.FormAddressPickerItem.AddressType : Swift.Hashable {}
extension Adyen.Installments.Plan : Swift.Equatable {}
extension Adyen.Installments.Plan : Swift.Hashable {}
extension Adyen.Installments.Plan : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.EditingStyle : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.EditingStyle : Swift.Hashable {}
extension Adyen.LogoURLProvider.Size : Swift.Equatable {}
extension Adyen.LogoURLProvider.Size : Swift.Hashable {}
extension Adyen.LogoURLProvider.Size : Swift.RawRepresentable {}
extension Adyen.ToolbarMode : Swift.Equatable {}
extension Adyen.ToolbarMode : Swift.Hashable {}
extension Adyen.PartialPaymentError : Swift.Equatable {}
extension Adyen.PartialPaymentError : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.PaymentResultCode : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.PaymentResultCode : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.PaymentResultCode : Swift.RawRepresentable {}
@_spi(AdyenInternal) extension Adyen.PhoneNumberPaymentMethod : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.PhoneNumberPaymentMethod : Swift.Hashable {}
@_spi(AdyenInternal) extension Adyen.PublicKeyProvider.Error : Swift.Equatable {}
@_spi(AdyenInternal) extension Adyen.PublicKeyProvider.Error : Swift.Hashable {}
extension Adyen.QRCodePaymentMethod : Swift.Equatable {}
extension Adyen.QRCodePaymentMethod : Swift.Hashable {}
extension Adyen.QRCodePaymentMethod : Swift.RawRepresentable {}
extension Adyen.RedirectComponent.Error : Swift.Equatable {}
extension Adyen.RedirectComponent.Error : Swift.Hashable {}
extension Adyen.RedirectDetails.Error : Swift.Equatable {}
extension Adyen.RedirectDetails.Error : Swift.Hashable {}
extension Adyen.ShopperInteraction : Swift.Equatable {}
extension Adyen.ShopperInteraction : Swift.Hashable {}
extension Adyen.ShopperInteraction : Swift.RawRepresentable {}
extension Adyen.ThreeDS2Action.ActionType : Swift.Equatable {}
extension Adyen.ThreeDS2Action.ActionType : Swift.Hashable {}
extension Adyen.ThreeDS2Action.ActionType : Swift.RawRepresentable {}
extension Adyen.ThreeDS2Component.Error : Swift.Equatable {}
extension Adyen.ThreeDS2Component.Error : Swift.Hashable {}
extension Adyen.VoucherPaymentMethod : Swift.Equatable {}
extension Adyen.VoucherPaymentMethod : Swift.Hashable {}
extension Adyen.VoucherPaymentMethod : Swift.RawRepresentable {}
extension Adyen.VoucherComponent : Adyen.Cancellable {}
extension Adyen.VoucherComponent : Adyen.ActionComponent {}
